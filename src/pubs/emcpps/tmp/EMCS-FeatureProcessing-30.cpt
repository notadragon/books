By publicly deriving
from a concrete class, we do not hide the underlying capabilities,
which can easily be accessed (perhaps accidentally) via assignment to
a pointer or reference to a base class (no casting required). What's
more, inadvertently passing such a class to a function taking the base
class by value will result in \emph{slicing}, which can be especially
problematic when the derived class holds data. Finally, if the derived
class purports to maintain \emph{class invariants} that the base class
does not preserve, this design technique is beyond dubious; a more
robust approach would be to use layering or at least private
inheritance. For more on improving compositional designs at scale, see
  \textbf{{lakos20}}, sections 3.5.10.5 and 3.7.3, pp.~687--703 and
  726--727, respectively.^^E^^L 
