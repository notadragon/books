The destructor of a \textbf{partially
constructed} object will not be invoked. However, the destructors of
each successfully constructed base and of data members will still be
invoked:

\begin{lstlisting}[language=C++, basicstyle={\ttfamily\footnotesize}]
#include <iostream>

using std::cout;
struct A { A() { cout << "A() "; } ~A() { cout << "~A() "; } };
struct B { B() { cout << "B() "; } ~B() { cout << "~B() "; } };

struct C : B
{
    A d;

    C()  { cout << "C() "; throw 0; }  // non-delegating constructor that throws
    ~C() { cout << "~C() ";         }  // destructor that never gets called
};

void f() try { C c; } catch(int) { }
    // prints (첫{\codeincomments{"B() A() C() \textasciitilde A() \textasciitilde B()"}}첫) to (첫{\codeincomments{stdout}}첫)
\end{lstlisting}

\noindent Notice that base-class \texttt{B} and member \texttt{d} of type
\texttt{a} were fully constructed, and so their respective destructors
are called, even though the destructor for class \texttt{C} itself is
  never executed.^^E^^L 
