The relative position of
\texttt{decltype(range.sort())} in the signature of
\texttt{sortRangeImpl} is not significant, as long as it is visible to
the compiler (as part of the function's \emph{logical interface})
during template substitution. This particular example (shown in the
main text) makes use of a function parameter that is defaulted to
\texttt{nullptr}. Alternatives involving a trailing return type or a
default template argument are also viable:

\begin{lstlisting}[language=C++, basicstyle={\ttfamily\footnotesize}]
template <typename Range>
auto sortRangeImpl(Range& range, int) -> decltype(range.sort(), void());
    // The comma operator is used to force the return type to (ù{\codeincomments{void}}ù),
    // regardless of the return type of (ù{\codeincomments{range.sort()}}ù).

template <typename Range, typename = decltype(std::declval<Range&>().sort()>
auto sortRangeImpl(Range& range, int);
    // (ù{\codeincomments{std::declval}}ù) is used to generate a reference to (ù{\codeincomments{Range}}ù) that can
    // be used in an unevaluated expression.
\end{lstlisting}
      ^^E^^L 
