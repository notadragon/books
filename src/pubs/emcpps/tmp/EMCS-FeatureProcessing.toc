\contentsline {chapter}{{Foreword}}{xi}%
\contentsline {chapter}{{Preface}}{xiii}%
\contentsline {chapter}{{Acknowledgments}}{xvii}%
\contentsline {chapter}{{About the Authors}}{xix}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}0}{Introduction}}{1}%
\contentsline {section}{What Makes This Book Different}{1}%
\contentsline {section}{Scope for the First Edition}{2}%
\contentsline {section}{The {\sffamily \itshape EMC++S} White Paper}{3}%
\contentsline {subsection}{Facts (Not Opinions)}{3}%
\contentsline {subsection}{Elucidation (Not Prescription)}{3}%
\contentsline {subsection}{Brevity (Not Verbosity)}{3}%
\contentsline {subsection}{Real-World (Not Contrived) Examples}{4}%
\contentsline {subsection}{At Scale (Not Overly Simplistic) Programs}{4}%
\contentsline {section}{What Do We Mean by {\sffamily \itshape Safely}?}{4}%
\contentsline {section}{A {\sffamily \itshape Safe} Feature}{5}%
\contentsline {section}{A {\sffamily \itshape Conditionally Safe} Feature}{5}%
\contentsline {section}{An {\sffamily \itshape Unsafe} Feature}{5}%
\contentsline {section}{Modern C++ Feature Catalog}{6}%
\contentsline {subsection}{Organization}{6}%
\contentsline {section}{How To Use This Book}{7}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}1}{Safe Features}}{9}%
\contentsline {section}{\sffamily \itshape C++11}{}
\contentsline {section}{Attributes}{10}%
\contentsline {subsection}{Description}{10}%
\contentsline {subsubsection}{C++ attribute syntax}{10}%
\contentsline {subsubsection}{C++ attribute placement}{11}%
\contentsline {subsubsection}{Common compiler-dependent attributes}{12}%
\contentsline {subsection}{Use Cases}{13}%
\contentsline {subsubsection}{Eliciting useful compiler diagnostics}{13}%
\contentsline {subsubsection}{Hinting at additional optimization opportunities}{13}%
\contentsline {subsubsection}{Delineating explicit assumptions in code to achieve better optimizations}{14}%
\contentsline {subsubsection}{Using attributes to control external static analysis}{15}%
\contentsline {subsubsection}{Creating new attributes to express semantic properties}{16}%
\contentsline {subsubsection}{Probing where attributes are permitted in the compilerâ€™s C++ grammar}{16}%
\contentsline {subsection}{Potential Pitfalls}{17}%
\contentsline {subsubsection}{Unrecognized attributes have implementation-defined behavior}{17}%
\contentsline {subsubsection}{Some attributes, if misused, can affect program correctness}{17}%
\contentsline {subsubsection}{Not every syntactic location is viable for an attribute}{18}%
\contentsline {subsection}{Annoyances}{18}%
\contentsline {subsection}{See Also}{18}%
\contentsline {subsection}{Further Reading}{19}%
\contentsline {section}{Binary Literals}{20}%
\contentsline {subsection}{Description}{20}%
\contentsline {subsection}{Use Cases}{21}%
\contentsline {subsubsection}{Bit masking and bitwise operations}{21}%
\contentsline {subsubsection}{Replicating constant binary data}{22}%
\contentsline {subsection}{Potential Pitfalls}{23}%
\contentsline {subsection}{Annoyances}{23}%
\contentsline {subsection}{See Also}{23}%
\contentsline {subsection}{Further Reading}{23}%
\contentsline {section}{Consecutive Right Angle Brackets}{24}%
\contentsline {subsection}{Description}{24}%
\contentsline {subsubsection}{Using the greater-than or right-shift operators within template-argument expressions}{24}%
\contentsline {subsection}{Use Cases}{25}%
\contentsline {subsubsection}{Avoiding annoying whitespace when composing template types}{25}%
\contentsline {subsection}{Potential pitfalls}{25}%
\contentsline {subsubsection}{Some C++03 programs may stop compiling in C++11}{25}%
\contentsline {subsubsection}{The meaning of a C++03 program can (in theory) silently change in C++11}{25}%
\contentsline {subsection}{Annoyances}{26}%
\contentsline {subsection}{See Also}{26}%
\contentsline {subsection}{Further Reading}{26}%
\contentsline {section}{\tt {decltype}}{27}%
\contentsline {subsection}{Description}{27}%
\contentsline {subsubsection}{Use with (typically named) entities}{27}%
\contentsline {subsubsection}{Use with (unnamed) expressions}{27}%
\contentsline {subsection}{Use Cases}{28}%
\contentsline {subsubsection}{Avoiding unnecessary use of explicit typenames}{28}%
\contentsline {subsubsection}{Expressing type-consistency explicitly}{28}%
\contentsline {subsubsection}{Creating an auxiliary variable of generic type}{29}%
\contentsline {subsubsection}{Determining the validity of a generic expression}{29}%
\contentsline {subsection}{Potential pitfalls}{31}%
\contentsline {subsection}{Annoyances}{31}%
\contentsline {subsection}{See Also}{31}%
\contentsline {subsection}{Further reading}{31}%
\contentsline {section}{Deleted Functions}{32}%
\contentsline {subsection}{Description}{32}%
\contentsline {subsection}{Use Cases}{32}%
\contentsline {subsubsection}{Suppressing special member function generation}{32}%
\contentsline {subsubsection}{Preventing a particular implicit conversion}{33}%
\contentsline {subsubsection}{Preventing all implicit conversions}{34}%
\contentsline {subsubsection}{Hiding a structural (nonpolymorphic) base class's member function}{35}%
\contentsline {subsection}{Potential Pitfalls}{35}%
\contentsline {subsection}{Annoyances}{36}%
\contentsline {subsection}{See Also}{36}%
\contentsline {subsection}{Further Reading}{36}%
\contentsline {section}{\tt {override}}{37}%
\contentsline {subsection}{Description}{37}%
\contentsline {subsection}{Use Cases}{37}%
\contentsline {subsubsection}{Ensuring that a member function of a base class is being overridden}{37}%
\contentsline {subsection}{Potential Pitfalls}{38}%
\contentsline {subsubsection}{Lack of consistency across a code base}{38}%
\contentsline {subsection}{Annoyances}{39}%
\contentsline {subsection}{See Also}{39}%
\contentsline {subsection}{Further Reading}{39}%
\contentsline {section}{Compile-Time Assertions ({\tt {static\_assert}})}{40}%
\contentsline {subsection}{Description}{40}%
\contentsline {subsubsection}{Syntax and semantics}{40}%
\contentsline {subsubsection}{Evaluation of static assertions in templates}{41}%
\contentsline {subsection}{Use Cases}{42}%
\contentsline {subsubsection}{Verifying assumptions about the target platform}{42}%
\contentsline {subsubsection}{Preventing misuse of class and function templates}{43}%
\contentsline {subsection}{Potential Pitfalls}{44}%
\contentsline {subsubsection}{Static assertions in templates can trigger unintended compilation failures}{44}%
\contentsline {subsubsection}{Misuse of static assertions to restrict overload sets}{45}%
\contentsline {subsection}{Annoyances}{47}%
\contentsline {subsubsection}{Mandatory string literal}{47}%
\contentsline {subsection}{See Also}{47}%
\contentsline {subsection}{Further reading}{47}%
\contentsline {section}{Trailing Function Return Types}{48}%
\contentsline {subsection}{Description}{48}%
\contentsline {subsection}{Use Cases}{49}%
\contentsline {subsubsection}{Function template whose return type depends on a parameter type}{49}%
\contentsline {subsubsection}{Avoiding having to qualify names redundantly in return types}{50}%
\contentsline {subsubsection}{Improving readability of declarations involving function pointers}{51}%
\contentsline {subsection}{Potential Pitfalls}{51}%
\contentsline {subsection}{Annoyances}{51}%
\contentsline {subsection}{See Also}{51}%
\contentsline {subsection}{Further Reading}{51}%
\contentsline {section}{Unrestricted Unions}{52}%
\contentsline {subsection}{Description}{52}%
\contentsline {subsection}{Use Cases}{55}%
\contentsline {subsubsection}{Implementing a \textbf {sum type} as a discriminating (or tagged) \tt {union}}{55}%
\contentsline {subsection}{Potential Pitfalls}{57}%
\contentsline {subsubsection}{Inadvertent misuse can lead to latent \textbf {undefined behavior} at runtime}{57}%
\contentsline {subsection}{Annoyances}{58}%
\contentsline {subsection}{See Also}{58}%
\contentsline {subsection}{Further Reading}{58}%
\contentsline {section}{The {\tt [[noreturn]]} Attribute}{59}%
\contentsline {subsection}{Description}{59}%
\contentsline {subsection}{Use Cases}{59}%
\contentsline {subsubsection}{Better compiler diagnostics}{59}%
\contentsline {subsubsection}{Improved runtime performance}{60}%
\contentsline {subsection}{Potential Pitfalls}{61}%
\contentsline {subsubsection}{\tt {[[noreturn]]} can inadvertently break an otherwise working program}{61}%
\contentsline {subsubsection}{Misuse of {\tt [[noreturn]]} on function pointers}{61}%
\contentsline {subsection}{Annoyances}{61}%
\contentsline {subsection}{See Also}{62}%
\contentsline {subsection}{Further Reading}{62}%
\contentsline {section}{Null Pointer Literal (\tt {nullptr})}{63}%
\contentsline {subsection}{Description}{63}%
\contentsline {subsection}{Use Cases}{64}%
\contentsline {subsubsection}{Improve type safety}{64}%
\contentsline {subsubsection}{Disambiguation of \tt {(int) 0} versus \tt {(T*) 0} during overload resolution}{65}%
\contentsline {subsubsection}{Overloading for a literal null pointer}{65}%
\contentsline {subsection}{Potential Pitfalls}{66}%
\contentsline {subsection}{Annoyances}{66}%
\contentsline {subsection}{See Also}{66}%
\contentsline {subsection}{Further Reading}{66}%
\contentsline {section}{\tt {alignas}}{67}%
\contentsline {subsection}{Description}{67}%
\contentsline {subsubsection}{Restricting the alignment of a particular object}{67}%
\contentsline {subsubsection}{Restricting the alignment of a user-defined type}{68}%
\contentsline {subsubsection}{Restricting the alignment of individual data members}{69}%
\contentsline {subsubsection}{Matching the alignment of another type}{69}%
\contentsline {subsection}{Use Cases}{70}%
\contentsline {subsubsection}{Creating a sufficiently aligned object buffer}{70}%
\contentsline {subsubsection}{Ensuring proper alignment for architecture-specific instructions}{71}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} among distinct objects in a multi-threaded program}{72}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} within a single thread-aware object}{73}%
\contentsline {subsection}{Potential Pitfalls}{73}%
\contentsline {subsubsection}{Underspecifying alignment is not universally reported}{73}%
\contentsline {subsubsection}{Incompatibly specifying alignment is \textbf {IFNDR}}{74}%
\contentsline {subsubsection}{Stricter alignment might reduce cache utilization}{75}%
\contentsline {subsection}{See Also}{75}%
\contentsline {subsection}{Further Reading}{75}%
\contentsline {subsection}{Appendix}{75}%
\contentsline {subsubsection}{Natural Alignment}{75}%
\contentsline {subsubsection}{Cache lines; L1, L2, and L3 cache; pages; and virtual memory}{77}%
\contentsline {section}{Delegating Constructors}{80}%
\contentsline {subsection}{Description}{80}%
\contentsline {subsection}{Use Cases}{81}%
\contentsline {subsubsection}{Avoiding code duplication among constructors}{81}%
\contentsline {subsection}{Potential Pitfalls}{84}%
\contentsline {subsubsection}{Delegation cycles}{84}%
\contentsline {subsubsection}{Suboptimal factoring}{84}%
\contentsline {subsection}{Annoyances}{85}%
\contentsline {subsection}{See Also}{85}%
\contentsline {subsection}{Further Reading}{85}%
\contentsline {section}{Local Types as Template Arguments}{86}%
\contentsline {subsection}{Description}{86}%
\contentsline {subsection}{Use Cases}{87}%
\contentsline {subsubsection}{Encapsulating a type within a function}{87}%
\contentsline {subsubsection}{Instantiating templates with local function objects as type arguments}{88}%
\contentsline {subsubsection}{Configuring algorithms via lambda expressions}{88}%
\contentsline {subsection}{Potential Pitfalls}{89}%
\contentsline {subsection}{Annoyances}{89}%
\contentsline {subsection}{See Also}{89}%
\contentsline {subsection}{Further Reading}{90}%
\contentsline {section}{{\tt long}\nobreakspace {}{\tt long}}{91}%
\contentsline {subsection}{Description}{91}%
\contentsline {subsection}{Use Cases}{91}%
\contentsline {subsubsection}{When your pedestrian four-byte {\tt int} might not cut it}{91}%
\contentsline {subsection}{Potential Pitfalls}{93}%
\contentsline {subsubsection}{Relying on the relative sizes of {\tt int}, {\tt long}, and {\tt long}\nobreakspace {}{\tt long}}{93}%
\contentsline {subsection}{See Also}{94}%
\contentsline {subsection}{Further Reading}{94}%
\contentsline {subsection}{Appendix: Historical Perspective on the Evolution of Use of Fundamental Integral Types}{94}%
\contentsline {section}{Alias Declarations and Alias Templates}{96}%
\contentsline {subsection}{Description}{96}%
\contentsline {subsection}{Use Cases}{97}%
\contentsline {subsubsection}{Simplifying convoluted {\tt typedef} declarations}{97}%
\contentsline {subsubsection}{Binding template arguments}{98}%
\contentsline {subsubsection}{Providing a shorthand notation for type traits}{98}%
\contentsline {subsection}{Potential Pitfalls}{99}%
\contentsline {subsection}{Annoyances}{99}%
\contentsline {subsection}{See Also}{99}%
\contentsline {subsection}{Further Reading}{100}%
\contentsline {subsection}{Appendix: Brief Review of (C++03) {\tt using} Declarations}{100}%
\contentsline {section}{Explicit Conversions}{103}%
\contentsline {subsection}{Description}{103}%
\contentsline {subsection}{Use Cases}{105}%
\contentsline {subsubsection}{Enabling contextual conversions to {\tt bool} as a test for validity}{105}%
\contentsline {subsection}{Potential Pitfalls}{107}%
\contentsline {subsubsection}{Sometimes implicit conversion is indicated}{107}%
\contentsline {subsection}{Sometimes a named function is better}{108}%
\contentsline {subsection}{Annoyances}{108}%
\contentsline {subsection}{See Also}{108}%
\contentsline {subsection}{Further Reading}{108}%
\contentsline {section}{\tt alignof}{109}%
\contentsline {subsection}{Description}{109}%
\contentsline {subsubsection}{\tt {alignof} Fundamental Types}{109}%
\contentsline {subsubsection}{\tt {alignof} User-Defined Types}{109}%
\contentsline {subsection}{Use Cases}{110}%
\contentsline {subsubsection}{Probing the alignment of a type during development}{110}%
\contentsline {subsubsection}{Determining if a given buffer is sufficiently aligned}{112}%
\contentsline {subsubsection}{Monotonic memory allocation}{114}%
\contentsline {subsection}{Annoyances}{117}%
\contentsline {subsubsection}{\tt {alignof} (unlike \tt {sizeof}) is defined only on types}{117}%
\contentsline {subsection}{See Also}{118}%
\contentsline {subsection}{Further Reading}{118}%
\contentsline {section}{Inheriting Constructors}{119}%
\contentsline {subsection}{Description}{119}%
\contentsline {subsection}{Use Cases}{123}%
\contentsline {subsubsection}{Abstract use case}{123}%
\contentsline {subsubsection}{Avoiding boilerplate code when employing structural inheritance}{123}%
\contentsline {subsubsection}{Avoiding boilerplate code when employing implementation inheritance}{124}%
\contentsline {subsubsection}{Implementing a strong {\tt typedef}}{125}%
\contentsline {subsubsection}{Incorporating reusable functionality via a mix-in}{127}%
\contentsline {subsection}{Potential Pitfalls}{128}%
\contentsline {subsubsection}{Newly introduced constructors in the base class can silently alter program behavior}{128}%
\contentsline {subsubsection}{Beware of inheriting implicit constructors}{129}%
\contentsline {subsection}{Annoyances}{131}%
\contentsline {subsubsection}{Inherited constructors cannot be selected individually}{131}%
\contentsline {subsubsection}{Access levels of inherited constructors are the same as in base class}{132}%
\contentsline {subsection}{See Also}{133}%
\contentsline {subsection}{Further Reading}{134}%
\contentsline {subsection}{Appendix: C++17 Improvements Made Retroactive to C++11/14}{134}%
\contentsline {subsubsection}{Inheriting constructors declared with a C-style ellipsis}{134}%
\contentsline {subsubsection}{Inheriting constructors that rely on friendship to declare function parameters}{135}%
\contentsline {subsubsection}{Inheriting constructor templates would be ill formed for a local class}{136}%
\contentsline {subsubsection}{SFINAE evaluation context with default function arguments}{136}%
\contentsline {subsubsection}{Suppression of constructors in the presence of default arguments}{137}%
\contentsline {subsubsection}{Suprising behavior with unary constructor templates}{138}%
\contentsline {section}{Unicode String and Character Literals}{139}%
\contentsline {subsection}{Description}{139}%
\contentsline {subsection}{Use Cases}{140}%
\contentsline {subsubsection}{Guaranteed-portable encodings of literals}{140}%
\contentsline {subsection}{Potential Pitfalls}{140}%
\contentsline {subsubsection}{Embedding Unicode graphemes}{140}%
\contentsline {subsubsection}{Lack of library support for Unicode}{140}%
\contentsline {subsubsection}{UTF-8 quirks}{141}%
\contentsline {subsection}{Annoyances}{141}%
\contentsline {subsection}{See Also}{141}%
\contentsline {subsection}{Further Reading}{141}%
\contentsline {section}{Explicit Enumeration Underlying Type}{142}%
\contentsline {subsection}{Description}{142}%
\contentsline {subsubsection}{Specifying underlying type explicitly}{142}%
\contentsline {subsection}{Use Cases}{143}%
\contentsline {subsubsection}{Ensuring a compact representation where enumerator values are salient}{143}%
\contentsline {subsection}{Potential Pitfalls}{144}%
\contentsline {subsubsection}{External use of opaque enumerators}{144}%
\contentsline {subsubsection}{Subtleties of integral promotion}{145}%
\contentsline {subsection}{See Also}{146}%
\contentsline {subsection}{Further Reading}{146}%
\contentsline {section}{{\tt enum} {\tt class}}{147}%
\contentsline {subsection}{Description}{147}%
\contentsline {subsubsection}{Drawbacks and workarounds relating to unscoped C++03 enumerations}{147}%
\contentsline {subsubsection}{Drawbacks relating to weakly typed, C++03 enumerators}{148}%
\contentsline {subsubsection}{Introducing the C++11 {\tt enum class}}{149}%
\contentsline {subsubsection}{{\tt enum} {\tt class} and underlying type}{151}%
\contentsline {subsection}{Use Cases}{151}%
\contentsline {subsubsection}{Avoiding unintended implicit conversions to arithmetic types}{151}%
\contentsline {subsubsection}{Avoiding namespace pollution}{153}%
\contentsline {subsubsection}{Improving overloading disambiguation}{154}%
\contentsline {subsubsection}{Encapsulating implementation details within the enumerators themselves}{157}%
\contentsline {subsection}{Potential Pitfalls}{158}%
\contentsline {subsubsection}{Strong typing of an {\tt enum} {\tt class} can be counterproductive}{158}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} for collections of named constants}{159}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} in association with bit flags}{160}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} in association with iteration}{161}%
\contentsline {subsubsection}{External use of opaque enumerators}{163}%
\contentsline {subsection}{Annoyances}{163}%
\contentsline {subsubsection}{Scoped enumerations do not necessarily add value}{163}%
\contentsline {subsection}{See Also}{164}%
\contentsline {subsection}{Further Reading}{164}%
\contentsline {section}{Opaque Enumeration Declarations}{165}%
\contentsline {section}{\ttfamily auto}{166}%
\contentsline {section}{\sffamily \itshape C++14}{}
\contentsline {section}{Aggregate Member Initialization Relaxation}{167}%
\contentsline {subsection}{Description}{167}%
\contentsline {subsection}{Use Cases}{168}%
\contentsline {subsubsection}{Configuration \tt {struct}s}{168}%
\contentsline {subsection}{Potential Pitfalls}{168}%
\contentsline {subsection}{Annoyances}{169}%
\contentsline {subsubsection}{Syntactical ambiguity in the presence of \textbf {brace elision}}{169}%
\contentsline {subsection}{See Also}{169}%
\contentsline {subsection}{Further Reading}{170}%
\contentsline {section}{Digit Separators}{171}%
\contentsline {subsection}{Description}{171}%
\contentsline {subsection}{Use Cases}{172}%
\contentsline {subsubsection}{Grouping digits together in large constants}{172}%
\contentsline {subsection}{Potential Pitfalls}{172}%
\contentsline {subsection}{See Also}{172}%
\contentsline {subsection}{Further Reading}{173}%
\contentsline {subsection}{Appendix: Silent Loss of Precision in Floating-Point Literals}{173}%
\contentsline {section}{Variable Templates}{176}%
\contentsline {subsection}{Description}{176}%
\contentsline {subsection}{Use Cases}{178}%
\contentsline {subsubsection}{Parameterized constants}{178}%
\contentsline {subsubsection}{Reducing verbosity of type traits}{179}%
\contentsline {subsection}{Potential Pitfalls}{180}%
\contentsline {subsubsection}{Recursive variable template initializations require {\tt const} or {\tt constexpr}}{180}%
\contentsline {subsection}{Annoyances}{182}%
\contentsline {subsubsection}{Variable templates do not support template template parameters}{182}%
\contentsline {subsection}{See Also}{183}%
\contentsline {subsection}{Further Reading}{183}%
\contentsline {section}{Defaulted Special Member Functions}{184}%
\contentsline {subsection}{Description}{184}%
\contentsline {subsubsection}{Declaring a special member function explicitly}{184}%
\contentsline {paragraph}{Example 1: Providing just the default constructor}{184}%
\contentsline {paragraph}{Example 2: Providing just a copy constructor}{184}%
\contentsline {paragraph}{Example 3: Providing just the destructor}{185}%
\contentsline {paragraph}{Example 4: Providing more than one special member function}{185}%
\contentsline {subsubsection}{Defaulting the first declaration of a special member function explicitly}{185}%
\contentsline {subsubsection}{Defaulting the implementation of a user-provided special member function}{186}%
\contentsline {subsection}{Use Cases}{187}%
\contentsline {subsubsection}{Restoring the generation of a special member function suppressed by another}{187}%
\contentsline {subsubsection}{Making class APIs explicit at no runtime cost}{188}%
\contentsline {subsubsection}{Preserving trivial copyability}{190}%
\contentsline {subsubsection}{Physically decoupling the interface from the implementation}{192}%
\contentsline {subsection}{Potential Pitfalls}{193}%
\contentsline {subsubsection}{Generation of defaulted functions is not guaranteed}{193}%
\contentsline {subsection}{See Also}{194}%
\contentsline {subsection}{Further Reading}{194}%
\contentsline {subsection}{Appendix: Implicit Generation of Special Member Functions}{194}%
\contentsline {section}{\tt [[deprecated]]}{196}%
\contentsline {subsection}{Description}{196}%
\contentsline {subsection}{Use Cases}{197}%
\contentsline {subsubsection}{Discouraging use of an obsolete or unsafe \textbf {entity}}{197}%
\contentsline {subsection}{Potential Pitfalls}{198}%
\contentsline {subsubsection}{Interaction with {\tt -Werror} (e.g., GCC, Clang) or {\tt /WX} (MSVC)}{198}%
\contentsline {subsection}{Annoyances}{199}%
\contentsline {subsection}{See Also}{199}%
\contentsline {subsection}{Further Reading}{199}%
\contentsline {section}{Relaxed {\ttfamily constexpr} Restrictions}{200}%
\contentsline {subsection}{Description}{200}%
\contentsline {subsection}{Use Cases}{201}%
\contentsline {subsubsection}{Nonrecursive {\tt constexpr} algorithms}{201}%
\contentsline {subsubsection}{Optimized metaprogramming algorithms}{203}%
\contentsline {subsection}{Potential Pitfalls}{206}%
\contentsline {subsection}{Annoyances}{206}%
\contentsline {subsection}{See Also}{206}%
\contentsline {subsection}{Further Reading}{207}%
\contentsline {subsection}{Appendix: Optimized C++11 Example Algorithms}{207}%
\contentsline {subsubsection}{Recursive Fibonacci}{207}%
\contentsline {subsubsection}{{\ttfamily constexpr} type list {\ttfamily Count} algorithm}{207}%
\contentsline {section}{Lambda-Capture Expressions}{209}%
\contentsline {subsection}{Description}{209}%
\contentsline {subsection}{Use Cases}{211}%
\contentsline {subsubsection}{Moving (as opposed to copying) objects into a closure}{211}%
\contentsline {subsubsection}{Providing mutable state for a closure}{212}%
\contentsline {subsubsection}{Capturing a modifiable copy of an existing {\ttfamily const} variable}{212}%
\contentsline {subsection}{Potential Pitfalls}{214}%
\contentsline {subsubsection}{Forwarding an existing variable into a closure always results in an object (never a reference)}{214}%
\contentsline {subsection}{Annoyances}{215}%
\contentsline {subsubsection}{Thereâ€™s no easy way to synthesize a {\ttfamily const} data member}{215}%
\contentsline {subsubsection}{{\ttfamily std::function} supports only copyable callable objects}{215}%
\contentsline {subsection}{See Also}{216}%
\contentsline {subsection}{Further Reading}{216}%
\contentsline {section}{Raw String Literals}{217}%
\contentsline {subsection}{Description}{217}%
\contentsline {subsubsection}{Collisions}{218}%
\contentsline {subsection}{Use Cases}{220}%
\contentsline {subsubsection}{Embedding code in a C++ program}{220}%
\contentsline {subsection}{Potential Pitfalls}{220}%
\contentsline {subsubsection}{Unexpected indentation}{220}%
\contentsline {subsubsection}{Encoding of new lines and white space}{221}%
\contentsline {subsection}{Annoyances}{222}%
\contentsline {subsection}{See Also}{222}%
\contentsline {subsection}{Further Reading}{222}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}2}{Conditionally Safe Features}}{223}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {2.1}C++11}{223}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\tt auto}{224}%
\contentsline {section}{Braced Initialization}{225}%
\contentsline {section}{Rvalue References}{226}%
\contentsline {section}{Default Member Initializers}{227}%
\contentsline {section}{{\ttfamily constexpr} Variables}{228}%
\contentsline {section}{{\ttfamily constexpr} Functions}{229}%
\contentsline {section}{Variadic Templates}{230}%
\contentsline {section}{Lambdas}{231}%
\contentsline {section}{Forwarding References}{232}%
\contentsline {section}{\tt noexcept}{233}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {2.2}C++14}{233}
\contentsline {section}{Generic Lambdas}{234}%
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{Short Title}{235}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}3}{Unsafe Features}}{237}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {3.1}C++11}{237}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{{\tt [[carries\_dependency]]}\hspace *{1em}(The {\tt [[carries\_dependency]]} Attribute)}{238}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {3.2}C++14}{239}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{Deduced Return Types\hspace *{1em}(Function Return Type Deduction)}{240}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}4}{Parting Thoughts}}{241}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{Testing Section}{241}%
\contentsline {section}{Testing Another Section}{241}%
\contentsline {chapter}{{Bibliography}}{243}%
\contentsline {chapter}{{Glossary}}{249}%
\contentsline {chapter}{Index}{263}%
