The C++17 Standard Library provides
the (nontemplate) class \texttt{std::any}, which is a type-safe
container for single values of \emph{any} \textbf{regular type}. The
implementation strategies surrounding alignment for \texttt{std::any}
in both \texttt{libstdc++} and \texttt{libc++} closely mirror those
used to implement the simplified \texttt{MyAny} class presented here.
Note that \texttt{std::any} also records the current \texttt{typeid}
(on construction or assignment) so that it can implement a
\texttt{const} template member function,
\texttt{bool}~\texttt{is<T>()}~\texttt{const}, to query, at runtime,
whether a specified type is currently the active one:

\begin{lstlisting}[language=C++, basicstyle={\ttfamily\footnotesize}]
void f(const std::any& object)
{
    if (object.is<int>()) { /* ... */ }
}
\end{lstlisting}
      ^^E^^L 
