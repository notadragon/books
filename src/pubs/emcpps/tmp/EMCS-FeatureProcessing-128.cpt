As of C++20, attempting to compare two values of distinct classically enumerated
types is a compile-time error. Note that explicitly converting at least one of them to an
integral type --- for example, using built-in unary plus --- both
makes our intentions clear and avoids warnings.

\begin{lstlisting}[language=C++, basicstyle={\ttfamily\footnotesize}]
if (e_A0 < 0)       { /* ... */ }  // OK, comparison with integral type
if (1.0 != e_B1)    { /* ... */ }  // OK, comparison with arithmetic type
if (A() <= e_A2)    { /* ... */ }  // OK, comparison with same enumerated type
if (e_A0 == e_B0)   { /* ... */ }  // warning, deprecated (error as of C++20)
if ( e_A0 == +e_B0) { /* ... */ }  // OK, unary (ù{\codeincomments{+}}ù) converts to integral type
if (+e_A0 ==  e_B0) { /* ... */ }  // OK,   "        "     "     "      "
if (+e_A0 == +e_B0) { /* ... */ }  // OK,   "        "     "     "      "
\end{lstlisting}
      ^^E^^L 
