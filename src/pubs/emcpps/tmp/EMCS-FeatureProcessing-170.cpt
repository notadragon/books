\textbf{Pack expansion} is
a language construct that expands a \textbf{variadic pack} during
compilation, generating code for each element of the pack. This
construct, along, with a \textbf{parameter pack} itself is a
  fundamental building block of variadic templates,
  introduced in C++11. As a minimal example, consider the variadic
  function template, \texttt{e}:

  \begin{lstlisting}[language=C++, basicstyle={\ttfamily\footnotesize}]
  template <int... Is> void e() { f(Is...); }
  \end{lstlisting}

\noindent \texttt{e} is a function template that can be instantiated
  with an arbitrary number of compile-time-constant integers. The
  \texttt{int...}~\texttt{Is} syntax declares a \textbf{variadic pack}
  of compile-time-constant integers. The \texttt{Is...} syntax (used to
  invoke \texttt{f}) is a basic form of pack expansion that will resolve
  to all the integers contained in the \texttt{Is} pack, separated by
  commas. For instance, invoking
  \texttt{e<0,}~\texttt{1,}~\texttt{2,}~\texttt{3>()} results in the
  subsequent invocation of
  \texttt{f(0,}~\texttt{1,}~\texttt{2,}~\texttt{3)}. Note that --- as
  seen in the \texttt{count} example (which starts on page~\pageref{relaxedconstexpr-countcode}) --- any arbitrary
  expression containing a variadic pack can be expanded:

  \begin{lstlisting}[language=C++, basicstyle={\ttfamily\footnotesize}]
  template <int... Is> void g() { h((Is > 0)...); }
  \end{lstlisting}

\noindent The \texttt{(Is}~\texttt{>}~\texttt{0)...} expansion (above) will
  resolve to \texttt{N} comma-separated Boolean values, where \texttt{N}
  is the number of elements contained in the \texttt{Is}
  \textbf{variadic pack}. As an example of this expansion, invoking
  \texttt{g<5,}~\texttt{-3,}~\texttt{9>()} results in the subsequence
  invocation of \texttt{h(true,}~\texttt{false,}~\texttt{true)}.^^E^^L 
