\contentsline {chapter}{{Foreword}}{xi}{}%
\contentsline {chapter}{{Preface}}{xiii}{}%
\contentsline {chapter}{{Acknowledgments}}{xvii}{}%
\contentsline {chapter}{{About the Authors}}{xix}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}0}{Introduction}}{1}{}%
\contentsline {section}{What Makes This Book Different}{1}{}%
\contentsline {section}{Scope for the First Edition}{2}{}%
\contentsline {section}{The {\itshape EMC++S} White Paper}{3}{}%
\contentsline {subsection}{Facts (Not Opinions)}{3}{}%
\contentsline {subsection}{Elucidation (Not Prescription)}{3}{}%
\contentsline {subsection}{Brevity (Not Verbosity)}{3}{}%
\contentsline {subsection}{Real-World (Not Contrived) Examples}{4}{}%
\contentsline {subsection}{At Scale (Not Overly Simplistic) Programs}{4}{}%
\contentsline {section}{What Do We Mean by {\sffamily \itshape Safely}?}{4}{}%
\contentsline {section}{A {\sffamily \itshape Safe} Feature}{5}{}%
\contentsline {section}{A {\sffamily \itshape Conditionally Safe} Feature}{5}{}%
\contentsline {section}{An {\sffamily \itshape Unsafe} Feature}{6}{}%
\contentsline {section}{Modern C++ Feature Catalog}{6}{}%
\contentsline {subsection}{Organization}{6}{}%
\contentsline {section}{How To Use This Book}{7}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}1}{Safe Features}}{9}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {1.1}C++11}{9}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\tt alignof}{10}{}%
\contentsline {subsection}{Description}{10}{}%
\contentsline {subsubsection}{\tt {alignof} Fundamental Types}{10}{}%
\contentsline {subsubsection}{\tt {alignof} User-Defined Types}{10}{}%
\contentsline {subsection}{Use Cases}{11}{}%
\contentsline {subsubsection}{Probing the alignment of a type during development}{11}{}%
\contentsline {subsubsection}{Determining if a given buffer is sufficiently aligned}{13}{}%
\contentsline {subsubsection}{Monotonic memory allocation}{15}{}%
\contentsline {subsection}{Annoyances}{18}{}%
\contentsline {subsubsection}{\tt {alignof} (unlike \tt {sizeof}) is defined only on types}{18}{}%
\contentsline {subsection}{See Also}{19}{}%
\contentsline {subsection}{Further Reading}{19}{}%
\contentsline {section}{Attribute Syntax}{20}{}%
\contentsline {subsection}{Description}{20}{}%
\contentsline {subsubsection}{C++ attribute syntax}{20}{}%
\contentsline {subsubsection}{C++ attribute placement}{21}{}%
\contentsline {subsubsection}{Common compiler-dependent attributes}{22}{}%
\contentsline {subsection}{Use Cases}{23}{}%
\contentsline {subsubsection}{Eliciting useful compiler diagnostics}{23}{}%
\contentsline {subsubsection}{Hinting at additional optimization opportunities}{24}{}%
\contentsline {subsubsection}{Delineating explicit assumptions in code to achieve better optimizations}{25}{}%
\contentsline {subsubsection}{Using attributes to control external static analysis}{26}{}%
\contentsline {subsubsection}{Creating new attributes to express semantic properties}{27}{}%
\contentsline {subsubsection}{Probing where attributes are permitted in the compilerâ€™s C++ grammar}{27}{}%
\contentsline {subsection}{Potential Pitfalls}{28}{}%
\contentsline {subsubsection}{Unrecognized attributes have implementation-defined behavior}{28}{}%
\contentsline {subsubsection}{Some attributes, if misused, can affect program correctness}{28}{}%
\contentsline {subsubsection}{Not every syntactic location is viable for an attribute}{29}{}%
\contentsline {subsection}{Annoyances}{29}{}%
\contentsline {subsection}{See Also}{29}{}%
\contentsline {subsection}{Further Reading}{29}{}%
\contentsline {section}{Consecutive {\tt >}s}{30}{}%
\contentsline {subsection}{Description}{30}{}%
\contentsline {subsubsection}{Using the greater-than or right-shift operators within template-argument expressions}{30}{}%
\contentsline {subsection}{Use Cases}{31}{}%
\contentsline {subsubsection}{Avoiding annoying whitespace when composing template types}{31}{}%
\contentsline {subsection}{Potential Pitfalls}{31}{}%
\contentsline {subsubsection}{Some C++03 programs may stop compiling in C++11}{31}{}%
\contentsline {subsubsection}{The meaning of a C++03 program can, in theory, silently change in C++11}{31}{}%
\contentsline {subsection}{Annoyances}{32}{}%
\contentsline {subsection}{See Also}{32}{}%
\contentsline {subsection}{Further Reading}{32}{}%
\contentsline {section}{Delegating Ctors}{33}{}%
\contentsline {subsection}{Description}{33}{}%
\contentsline {subsection}{Use Cases}{34}{}%
\contentsline {subsubsection}{Avoiding code duplication among constructors}{34}{}%
\contentsline {subsection}{Potential Pitfalls}{37}{}%
\contentsline {subsubsection}{Delegation cycles}{37}{}%
\contentsline {subsubsection}{Suboptimal factoring}{37}{}%
\contentsline {subsection}{Annoyances}{38}{}%
\contentsline {subsection}{See Also}{38}{}%
\contentsline {subsection}{Further Reading}{38}{}%
\contentsline {section}{Inheriting Ctors}{39}{}%
\contentsline {subsection}{Description}{39}{}%
\contentsline {subsection}{Use Cases}{43}{}%
\contentsline {subsubsection}{Abstract use case}{43}{}%
\contentsline {subsubsection}{Avoiding boilerplate code when employing structural inheritance}{43}{}%
\contentsline {subsubsection}{Avoiding boilerplate code when employing implementation inheritance}{44}{}%
\contentsline {subsubsection}{Implementing a strong {\tt typedef}}{45}{}%
\contentsline {subsubsection}{Incorporating reusable functionality via a mix-in}{47}{}%
\contentsline {subsection}{Potential Pitfalls}{48}{}%
\contentsline {subsubsection}{Newly introduced constructors in the base class can silently alter program behavior}{48}{}%
\contentsline {subsubsection}{Beware of inheriting implicit constructors}{49}{}%
\contentsline {subsection}{Annoyances}{51}{}%
\contentsline {subsubsection}{Inherited constructors cannot be selected individually}{51}{}%
\contentsline {subsubsection}{Access levels of inherited constructors are the same as in base class}{52}{}%
\contentsline {subsection}{See Also}{53}{}%
\contentsline {subsection}{Further Reading}{54}{}%
\contentsline {subsection}{Appendix: C++17 Improvements Made Retroactive to C++11/14}{54}{}%
\contentsline {subsubsection}{Inheriting constructors declared with a C-style ellipsis}{54}{}%
\contentsline {subsubsection}{Inheriting constructors that rely on friendship to declare function parameters}{55}{}%
\contentsline {subsubsection}{Inheriting constructor templates would be ill formed for a local class}{56}{}%
\contentsline {subsubsection}{SFINAE evaluation context with default function arguments}{56}{}%
\contentsline {subsubsection}{Suppression of constructors in the presence of default arguments}{57}{}%
\contentsline {subsubsection}{Suprising behavior with unary constructor templates}{57}{}%
\contentsline {section}{\tt {decltype}}{59}{}%
\contentsline {subsection}{Description}{59}{}%
\contentsline {subsubsection}{Use with entities}{59}{}%
\contentsline {subsubsection}{Use with expressions}{59}{}%
\contentsline {subsection}{Use Cases}{60}{}%
\contentsline {subsubsection}{Avoiding unnecessary use of explicit typenames}{60}{}%
\contentsline {subsubsection}{Expressing type-consistency explicitly}{60}{}%
\contentsline {subsubsection}{Creating an auxiliary variable of generic type}{61}{}%
\contentsline {subsubsection}{Determining the validity of a generic expression}{62}{}%
\contentsline {subsection}{Potential Pitfalls}{63}{}%
\contentsline {subsection}{Annoyances}{64}{}%
\contentsline {subsubsection}{Mechanical repetition of expressions might be required}{64}{}%
\contentsline {subsection}{See Also}{64}{}%
\contentsline {subsection}{Further Reading}{65}{}%
\contentsline {section}{Defaulted Functions}{66}{}%
\contentsline {subsection}{Description}{66}{}%
\contentsline {subsubsection}{Declaring a special member function explicitly}{66}{}%
\contentsline {paragraph}{Example 1: Providing just the default constructor}{66}{}%
\contentsline {paragraph}{Example 2: Providing just a copy constructor}{66}{}%
\contentsline {paragraph}{Example 3: Providing just the destructor}{67}{}%
\contentsline {paragraph}{Example 4: Providing more than one special member function}{67}{}%
\contentsline {subsubsection}{Defaulting the first declaration of a special member function explicitly}{67}{}%
\contentsline {subsubsection}{Defaulting the implementation of a user-provided special member function}{68}{}%
\contentsline {subsection}{Use Cases}{69}{}%
\contentsline {subsubsection}{Restoring the generation of a special member function suppressed by another}{69}{}%
\contentsline {subsubsection}{Making class APIs explicit at no runtime cost}{70}{}%
\contentsline {subsubsection}{Preserving trivial copyability}{72}{}%
\contentsline {subsubsection}{Physically decoupling the interface from the implementation}{74}{}%
\contentsline {subsection}{Potential Pitfalls}{75}{}%
\contentsline {subsubsection}{Generation of defaulted functions is not guaranteed}{75}{}%
\contentsline {subsection}{See Also}{76}{}%
\contentsline {subsection}{Further Reading}{76}{}%
\contentsline {subsection}{Appendix: Implicit Generation of Special Member Functions}{76}{}%
\contentsline {section}{Deleted Functions}{78}{}%
\contentsline {subsection}{Description}{78}{}%
\contentsline {subsection}{Use Cases}{78}{}%
\contentsline {subsubsection}{Suppressing special member function generation}{78}{}%
\contentsline {subsubsection}{Preventing a particular implicit conversion}{79}{}%
\contentsline {subsubsection}{Preventing all implicit conversions}{80}{}%
\contentsline {subsubsection}{Hiding a structural (nonpolymorphic) base class's member function}{81}{}%
\contentsline {subsection}{Potential Pitfalls}{82}{}%
\contentsline {subsection}{Annoyances}{82}{}%
\contentsline {subsection}{See Also}{82}{}%
\contentsline {subsection}{Further Reading}{82}{}%
\contentsline {section}{{\tt explicit} Operators}{83}{}%
\contentsline {subsection}{Description}{83}{}%
\contentsline {subsection}{Use Cases}{85}{}%
\contentsline {subsubsection}{Enabling contextual conversions to {\tt bool} as a test for validity}{85}{}%
\contentsline {subsection}{Potential Pitfalls}{87}{}%
\contentsline {subsubsection}{Sometimes implicit conversion is indicated}{87}{}%
\contentsline {subsection}{Sometimes a named function is better}{88}{}%
\contentsline {subsection}{Annoyances}{88}{}%
\contentsline {subsection}{See Also}{88}{}%
\contentsline {subsection}{Further Reading}{88}{}%
\contentsline {section}{{\tt extern} {\tt template}}{89}{}%
\contentsline {section}{Function {\tt static} '11}{90}{}%
\contentsline {subsection}{Description}{90}{}%
\contentsline {subsubsection}{Logger example}{92}{}%
\contentsline {subsubsection}{Multithreaded contexts}{93}{}%
\contentsline {subsection}{Use Cases}{95}{}%
\contentsline {subsubsection}{Meyers Singleton}{95}{}%
\contentsline {subsubsection}{Thread-safe initialization of global objects}{99}{}%
\contentsline {subsection}{Potential Pitfalls}{100}{}%
\contentsline {subsubsection}{Relying on initialization order of \tt {static} objects}{100}{}%
\contentsline {subsubsection}{Depending on order-of-destruction of local objects after \tt {main} returns}{102}{}%
\contentsline {subsection}{Annoyances}{103}{}%
\contentsline {subsubsection}{Overhead in single-threaded applications}{103}{}%
\contentsline {subsection}{See Also}{104}{}%
\contentsline {subsection}{Further Reading}{104}{}%
\contentsline {subsection}{Appendix: C++03 Double-Checked Lock Pattern}{104}{}%
\contentsline {section}{{\tt inline} {\tt namespace}}{106}{}%
\contentsline {subsection}{Description}{106}{}%
\contentsline {subsubsection}{Loss of access to duplicate names in enclosing namespace}{107}{}%
\contentsline {subsubsection}{Argument-dependentâ€“lookup interoperability across {\tt inline} {\tt namespace} boundaries}{109}{}%
\contentsline {subsubsection}{The ability to specialize templates declared in a nested {\tt inline} namespace}{110}{}%
\contentsline {subsubsection}{Reopening namespaces can reopen nested {\tt inline} ones}{111}{}%
\contentsline {subsection}{Use Cases}{112}{}%
\contentsline {subsubsection}{Facilitating API migration}{112}{}%
\contentsline {subsubsection}{Link-safe ABI versioning}{117}{}%
\contentsline {subsubsection}{Build modes and ABI link safety}{121}{}%
\contentsline {subsubsection}{Enabling selective {\tt using} directives for short-named entities}{124}{}%
\contentsline {subsection}{Potential Pitfalls}{125}{}%
\contentsline {subsubsection}{{\tt inline}-namespace-based versioning doesnâ€™t scale}{125}{}%
\contentsline {subsubsection}{Specializing templates in {\tt std} can be problematic}{127}{}%
\contentsline {subsubsection}{Inconsistent use of {\tt inline} keyword is \textbf {ill formed, no diagnostic required}}{128}{}%
\contentsline {subsection}{Annoyances}{128}{}%
\contentsline {subsubsection}{Inability to redeclare across namespaces impedes code factoring}{128}{}%
\contentsline {subsubsection}{Only one namespace can contain any given {\tt inline} namespace}{131}{}%
\contentsline {subsection}{See Also}{131}{}%
\contentsline {subsection}{Further Reading}{132}{}%
\contentsline {subsection}{Appendix: Case study of using {\tt inline} namespaces for versioning}{132}{}%
\contentsline {section}{Local Types '11}{134}{}%
\contentsline {subsection}{Description}{134}{}%
\contentsline {subsection}{Use Cases}{135}{}%
\contentsline {subsubsection}{Encapsulating a type within a function}{135}{}%
\contentsline {subsubsection}{Instantiating templates with local function objects as type arguments}{136}{}%
\contentsline {subsubsection}{Configuring algorithms via lambda expressions}{136}{}%
\contentsline {subsection}{Potential Pitfalls}{137}{}%
\contentsline {subsection}{Annoyances}{137}{}%
\contentsline {subsection}{See Also}{137}{}%
\contentsline {subsection}{Further Reading}{138}{}%
\contentsline {section}{{\tt long} {\tt long}}{139}{}%
\contentsline {subsection}{Description}{139}{}%
\contentsline {subsection}{Use Cases}{139}{}%
\contentsline {subsubsection}{When your pedestrian four-byte {\tt int} might not cut it}{139}{}%
\contentsline {subsection}{Potential Pitfalls}{141}{}%
\contentsline {subsubsection}{Relying on the relative sizes of {\tt int}, {\tt long}, and {\tt long}\nobreakspace {}{\tt long}}{141}{}%
\contentsline {subsection}{See Also}{142}{}%
\contentsline {subsection}{Further Reading}{142}{}%
\contentsline {subsection}{Appendix: Historical Perspective on the Evolution of Use of Fundamental Integral Types}{142}{}%
\contentsline {section}{\tt noreturn}{144}{}%
\contentsline {subsection}{Description}{144}{}%
\contentsline {subsection}{Use Cases}{144}{}%
\contentsline {subsubsection}{Better compiler diagnostics}{144}{}%
\contentsline {subsubsection}{Improved runtime performance}{145}{}%
\contentsline {subsection}{Potential Pitfalls}{146}{}%
\contentsline {subsubsection}{\tt {[[noreturn]]} can inadvertently break an otherwise working program}{146}{}%
\contentsline {subsubsection}{Misuse of {\tt [[noreturn]]} on function pointers}{146}{}%
\contentsline {subsection}{Annoyances}{147}{}%
\contentsline {subsection}{See Also}{147}{}%
\contentsline {subsection}{Further Reading}{147}{}%
\contentsline {section}{\tt nullptr}{148}{}%
\contentsline {subsection}{Description}{148}{}%
\contentsline {subsection}{Use Cases}{149}{}%
\contentsline {subsubsection}{Improvement of type safety}{149}{}%
\contentsline {subsubsection}{Disambiguation of \lstinline !(int)0! vs. \lstinline !(T*)0! during overload resolution}{150}{}%
\contentsline {subsubsection}{Overloading for a literal null pointer}{151}{}%
\contentsline {subsection}{Potential Pitfalls}{151}{}%
\contentsline {subsection}{Annoyances}{151}{}%
\contentsline {subsection}{See Also}{151}{}%
\contentsline {subsection}{Further Reading}{151}{}%
\contentsline {section}{\tt override}{152}{}%
\contentsline {subsection}{Description}{152}{}%
\contentsline {subsection}{Use Cases}{153}{}%
\contentsline {subsubsection}{Ensuring that a member function of a base class is being overridden}{153}{}%
\contentsline {subsection}{Potential Pitfalls}{154}{}%
\contentsline {subsubsection}{Lack of consistency across a codebase}{154}{}%
\contentsline {subsection}{Annoyances}{154}{}%
\contentsline {subsection}{See Also}{154}{}%
\contentsline {subsection}{Further Reading}{154}{}%
\contentsline {section}{Raw String Literals '14}{155}{}%
\contentsline {subsection}{Description}{155}{}%
\contentsline {subsubsection}{Collisions}{156}{}%
\contentsline {subsection}{Use Cases}{158}{}%
\contentsline {subsubsection}{Embedding code in a C++ program}{158}{}%
\contentsline {subsection}{Potential Pitfalls}{158}{}%
\contentsline {subsubsection}{Unexpected indentation}{158}{}%
\contentsline {subsubsection}{Encoding of new lines and whitespace}{159}{}%
\contentsline {subsection}{Annoyances}{160}{}%
\contentsline {subsection}{See Also}{160}{}%
\contentsline {subsection}{Further Reading}{160}{}%
\contentsline {section}{\tt static\_assert}{161}{}%
\contentsline {subsection}{Description}{161}{}%
\contentsline {subsubsection}{Syntax and semantics}{161}{}%
\contentsline {subsubsection}{Evaluation of static assertions in templates}{162}{}%
\contentsline {subsection}{Use Cases}{163}{}%
\contentsline {subsubsection}{Verifying assumptions about the target platform}{163}{}%
\contentsline {subsubsection}{Preventing misuse of class and function templates}{164}{}%
\contentsline {subsection}{Potential Pitfalls}{165}{}%
\contentsline {subsubsection}{Static assertions in templates can trigger unintended compilation failures}{165}{}%
\contentsline {subsubsection}{Misuse of static assertions to restrict overload sets}{166}{}%
\contentsline {subsection}{Annoyances}{168}{}%
\contentsline {subsubsection}{Mandatory string literal}{168}{}%
\contentsline {subsection}{See Also}{168}{}%
\contentsline {subsection}{Further Reading}{168}{}%
\contentsline {section}{Trailing Return}{169}{}%
\contentsline {subsection}{Description}{169}{}%
\contentsline {subsection}{Use Cases}{171}{}%
\contentsline {subsubsection}{Function template whose return type depends on a parameter type}{171}{}%
\contentsline {subsubsection}{Avoiding having to qualify names redundantly in return types}{171}{}%
\contentsline {subsubsection}{Improving readability of declarations involving function pointers}{172}{}%
\contentsline {subsection}{Potential Pitfalls}{172}{}%
\contentsline {subsection}{Annoyances}{172}{}%
\contentsline {subsection}{See Also}{172}{}%
\contentsline {subsection}{Further Reading}{173}{}%
\contentsline {section}{Unicode Literals}{174}{}%
\contentsline {subsection}{Description}{174}{}%
\contentsline {subsection}{Use Cases}{175}{}%
\contentsline {subsubsection}{Guaranteed-portable encodings of literals}{175}{}%
\contentsline {subsection}{Potential Pitfalls}{175}{}%
\contentsline {subsubsection}{Embedding Unicode graphemes}{175}{}%
\contentsline {subsubsection}{Lack of library support for Unicode}{175}{}%
\contentsline {subsubsection}{UTF-8 quirks}{176}{}%
\contentsline {subsection}{Annoyances}{176}{}%
\contentsline {subsection}{See Also}{176}{}%
\contentsline {subsection}{Further Reading}{176}{}%
\contentsline {section}{{\tt using} Aliases}{177}{}%
\contentsline {subsection}{Description}{177}{}%
\contentsline {subsection}{Use Cases}{178}{}%
\contentsline {subsubsection}{Simplifying convoluted {\tt typedef} declarations}{178}{}%
\contentsline {subsubsection}{Binding template arguments}{179}{}%
\contentsline {subsubsection}{Providing a shorthand notation for type traits}{179}{}%
\contentsline {subsection}{Potential Pitfalls}{180}{}%
\contentsline {subsection}{Annoyances}{180}{}%
\contentsline {subsection}{See Also}{180}{}%
\contentsline {subsection}{Further Reading}{181}{}%
\contentsline {subsection}{Appendix: Brief Review of (C++03) {\tt using} Declarations}{181}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {1.2}C++14}{183}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{Aggregate Init '14}{184}{}%
\contentsline {subsection}{Description}{184}{}%
\contentsline {subsection}{Use Cases}{185}{}%
\contentsline {subsubsection}{Configuration \tt {struct}s}{185}{}%
\contentsline {subsection}{Potential Pitfalls}{185}{}%
\contentsline {subsection}{Annoyances}{186}{}%
\contentsline {subsubsection}{Syntactical ambiguity in the presence of \textbf {brace elision}}{186}{}%
\contentsline {subsection}{See Also}{186}{}%
\contentsline {subsection}{Further Reading}{187}{}%
\contentsline {section}{Binary Literals}{188}{}%
\contentsline {subsection}{Description}{188}{}%
\contentsline {subsection}{Use Cases}{189}{}%
\contentsline {subsubsection}{Bit masking and bitwise operations}{189}{}%
\contentsline {subsubsection}{Replicating constant binary data}{190}{}%
\contentsline {subsection}{Potential Pitfalls}{191}{}%
\contentsline {subsection}{Annoyances}{191}{}%
\contentsline {subsection}{See Also}{192}{}%
\contentsline {subsection}{Further Reading}{192}{}%
\contentsline {section}{\tt deprecated}{193}{}%
\contentsline {subsection}{Description}{193}{}%
\contentsline {subsection}{Use Cases}{194}{}%
\contentsline {subsubsection}{Discouraging use of an obsolete or unsafe \textbf {entity}}{194}{}%
\contentsline {subsection}{Potential Pitfalls}{195}{}%
\contentsline {subsubsection}{Interaction with {\tt -Werror} (e.g., GCC, Clang) or {\tt /WX} (MSVC)}{195}{}%
\contentsline {subsection}{Annoyances}{196}{}%
\contentsline {subsection}{See Also}{196}{}%
\contentsline {subsection}{Further Reading}{196}{}%
\contentsline {section}{Digit Separators}{197}{}%
\contentsline {subsection}{Description}{197}{}%
\contentsline {subsection}{Use Cases}{198}{}%
\contentsline {subsubsection}{Grouping digits together in large constants}{198}{}%
\contentsline {subsection}{Potential Pitfalls}{198}{}%
\contentsline {subsection}{See Also}{198}{}%
\contentsline {subsection}{Further Reading}{199}{}%
\contentsline {subsection}{Appendix: Silent Loss of Precision in Floating-Point Literals}{199}{}%
\contentsline {section}{Lambda Captures}{202}{}%
\contentsline {subsection}{Description}{202}{}%
\contentsline {subsection}{Use Cases}{204}{}%
\contentsline {subsubsection}{Moving (as opposed to copying) objects into a closure}{204}{}%
\contentsline {subsubsection}{Providing mutable state for a closure}{205}{}%
\contentsline {subsubsection}{Capturing a modifiable copy of an existing {\ttfamily const} variable}{205}{}%
\contentsline {subsection}{Potential Pitfalls}{207}{}%
\contentsline {subsubsection}{Forwarding an existing variable into a closure always results in an object (never a reference)}{207}{}%
\contentsline {subsection}{Annoyances}{208}{}%
\contentsline {subsubsection}{Thereâ€™s no easy way to synthesize a {\ttfamily const} data member}{208}{}%
\contentsline {subsubsection}{{\ttfamily std::function} supports only copyable callable objects}{208}{}%
\contentsline {subsection}{See Also}{209}{}%
\contentsline {subsection}{Further Reading}{209}{}%
\contentsline {section}{Variable Templates}{210}{}%
\contentsline {subsection}{Description}{210}{}%
\contentsline {subsection}{Use Cases}{212}{}%
\contentsline {subsubsection}{Parameterized constants}{212}{}%
\contentsline {subsubsection}{Reducing verbosity of type traits}{213}{}%
\contentsline {subsection}{Potential Pitfalls}{214}{}%
\contentsline {subsubsection}{Recursive variable template initializations require {\tt const} or {\tt constexpr}}{214}{}%
\contentsline {subsection}{Annoyances}{216}{}%
\contentsline {subsubsection}{Variable templates do not support template template parameters}{216}{}%
\contentsline {subsection}{See Also}{217}{}%
\contentsline {subsection}{Further Reading}{217}{}%
\contentsline {section}{{\tt constexpr} Functions '14}{218}{}%
\contentsline {subsection}{Description}{218}{}%
\contentsline {subsection}{Use Cases}{219}{}%
\contentsline {subsubsection}{Nonrecursive {\tt constexpr} algorithms}{219}{}%
\contentsline {subsubsection}{Optimized metaprogramming algorithms}{221}{}%
\contentsline {subsection}{Potential Pitfalls}{224}{}%
\contentsline {subsection}{Annoyances}{224}{}%
\contentsline {subsection}{See Also}{224}{}%
\contentsline {subsection}{Further Reading}{225}{}%
\contentsline {subsection}{Appendix: Optimized C++11 Example Algorithms}{225}{}%
\contentsline {subsubsection}{Recursive Fibonacci}{225}{}%
\contentsline {subsubsection}{{\ttfamily constexpr} type list {\ttfamily Count} algorithm}{225}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}2}{Conditionally Safe Features}}{227}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {2.1}C++11}{227}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\tt alignas}{228}{}%
\contentsline {subsection}{Description}{228}{}%
\contentsline {subsubsection}{Restricting the alignment of a particular object}{228}{}%
\contentsline {subsubsection}{Restricting the alignment of a user-defined type}{229}{}%
\contentsline {subsubsection}{Restricting the alignment of individual data members}{230}{}%
\contentsline {subsubsection}{Matching the alignment of another type}{230}{}%
\contentsline {subsection}{Use Cases}{231}{}%
\contentsline {subsubsection}{Creating a sufficiently aligned object buffer}{231}{}%
\contentsline {subsubsection}{Ensuring proper alignment for architecture-specific instructions}{232}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} among distinct objects in a multi-threaded program}{233}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} within a single thread-aware object}{234}{}%
\contentsline {subsection}{Potential Pitfalls}{234}{}%
\contentsline {subsubsection}{Underspecifying alignment is not universally reported}{234}{}%
\contentsline {subsubsection}{Incompatibly specifying alignment is \textbf {IFNDR}}{235}{}%
\contentsline {subsubsection}{Stricter alignment might reduce cache utilization}{236}{}%
\contentsline {subsection}{See Also}{236}{}%
\contentsline {subsection}{Further Reading}{236}{}%
\contentsline {subsection}{Appendix}{236}{}%
\contentsline {subsubsection}{Natural Alignment}{236}{}%
\contentsline {subsubsection}{Cache lines; L1, L2, and L3 cache; pages; and virtual memory}{238}{}%
\contentsline {section}{{\tt auto} Variables}{241}{}%
\contentsline {section}{Braced Init}{242}{}%
\contentsline {section}{{\tt constexpr} Functions}{243}{}%
\contentsline {section}{{\tt constexpr} Variables}{244}{}%
\contentsline {section}{Default Member Init}{245}{}%
\contentsline {section}{{\tt enum}\nobreakspace {}{\tt class}}{246}{}%
\contentsline {subsection}{Description}{246}{}%
\contentsline {subsubsection}{Drawbacks and workarounds relating to unscoped C++03 enumerations}{246}{}%
\contentsline {subsubsection}{Drawbacks relating to weakly typed, C++03 enumerators}{247}{}%
\contentsline {subsubsection}{Introducing the C++11 {\tt enum class}}{248}{}%
\contentsline {subsubsection}{{\tt enum} {\tt class} and underlying type}{250}{}%
\contentsline {subsection}{Use Cases}{250}{}%
\contentsline {subsubsection}{Avoiding unintended implicit conversions to arithmetic types}{250}{}%
\contentsline {subsubsection}{Avoiding namespace pollution}{252}{}%
\contentsline {subsubsection}{Improving overloading disambiguation}{253}{}%
\contentsline {subsubsection}{Encapsulating implementation details within the enumerators themselves}{256}{}%
\contentsline {subsection}{Potential Pitfalls}{257}{}%
\contentsline {subsubsection}{Strong typing of an {\tt enum} {\tt class} can be counterproductive}{257}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} for collections of named constants}{258}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} in association with bit flags}{259}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} in association with iteration}{260}{}%
\contentsline {subsubsection}{External use of opaque enumerators}{262}{}%
\contentsline {subsection}{Annoyances}{262}{}%
\contentsline {subsubsection}{Scoped enumerations do not necessarily add value}{262}{}%
\contentsline {subsection}{See Also}{263}{}%
\contentsline {subsection}{Further Reading}{263}{}%
\contentsline {section}{Opaque {\tt enum}s}{264}{}%
\contentsline {subsection}{Description}{264}{}%
\contentsline {subsection}{Use Cases}{265}{}%
\contentsline {subsubsection}{Using opaque enumerations within a header file}{265}{}%
\contentsline {subsubsection}{Cookie: Insulating all external clients from the enumerator list}{268}{}%
\contentsline {subsubsection}{Dual-Access: Insulating some external clients from the enumerator list}{274}{}%
\contentsline {subsection}{Potential Pitfalls}{277}{}%
\contentsline {subsubsection}{Redeclaring an externally defined enumeration locally}{277}{}%
\contentsline {subsubsection}{Inciting local enumeration declarations: an attractive nuisance}{278}{}%
\contentsline {subsection}{Annoyances}{279}{}%
\contentsline {subsubsection}{Opaque enumerations are not completely type safe}{279}{}%
\contentsline {subsection}{See Also}{279}{}%
\contentsline {subsection}{Further Reading}{279}{}%
\contentsline {section}{Underlying Type '11}{281}{}%
\contentsline {subsection}{Description}{281}{}%
\contentsline {subsubsection}{Specifying underlying type explicitly}{281}{}%
\contentsline {subsection}{Use Cases}{282}{}%
\contentsline {subsubsection}{Ensuring a compact representation where enumerator values are salient}{282}{}%
\contentsline {subsection}{Potential Pitfalls}{283}{}%
\contentsline {subsubsection}{External use of opaque enumerators}{283}{}%
\contentsline {subsubsection}{Subtleties of integral promotion}{284}{}%
\contentsline {subsection}{See Also}{285}{}%
\contentsline {subsection}{Further Reading}{285}{}%
\contentsline {section}{{\tt friend} '11}{286}{}%
\contentsline {subsection}{Description}{286}{}%
\contentsline {subsection}{Use Cases}{288}{}%
\contentsline {subsubsection}{Safely declaring a previously declared type to be a friend}{288}{}%
\contentsline {subsubsection}{Befriending a type alias used as a customization point}{289}{}%
\contentsline {subsubsection}{Using the {\tt PassKey} idiom to enforce initialization}{290}{}%
\contentsline {subsubsection}{Granting a specific type access to a single {\tt private} function}{292}{}%
\contentsline {subsubsection}{Curiously recurring template pattern}{295}{}%
\contentsline {subsection}{Potential Pitfalls}{295}{}%
\contentsline {subsubsection}{Long-distance friendship}{295}{}%
\contentsline {subsection}{See Also}{295}{}%
\contentsline {subsection}{Further Reading}{295}{}%
\contentsline {subsection}{Appendix: Curiously Recurring Template Pattern Use Cases}{296}{}%
\contentsline {subsubsection}{Refactoring using the curiously recurring template pattern}{296}{}%
\contentsline {subsubsection}{Synthesizing equality using the curiously recurring template pattern}{298}{}%
\contentsline {subsubsection}{Compile-time polymorphism using the curiously recurring template pattern}{300}{}%
\contentsline {subsubsection}{Compile-time visitor using the curiously recurring template pattern}{303}{}%
\contentsline {section}{Forwarding References}{308}{}%
\contentsline {subsection}{Description}{308}{}%
\contentsline {subsubsection}{A brief review of function template argument deduction}{310}{}%
\contentsline {subsubsection}{Reference collapsing}{311}{}%
\contentsline {subsubsection}{Identifying forwarding references}{312}{}%
\contentsline {subsubsection}{{\tt auto\&\&} --- a forwarding reference in a non-parameter context}{313}{}%
\contentsline {subsubsection}{Forwarding references without forwarding}{314}{}%
\contentsline {subsubsection}{The {\tt std::forward} utility}{315}{}%
\contentsline {subsection}{Use Cases}{315}{}%
\contentsline {subsubsection}{Perfectly forwarding an expression to a downstream consumer}{315}{}%
\contentsline {subsubsection}{Handling multiple parameters concisely}{316}{}%
\contentsline {subsubsection}{Perfect forwarding for generic factory functions}{317}{}%
\contentsline {subsubsection}{Wrapping initialization in a generic factory function}{318}{}%
\contentsline {subsubsection}{Emplacement}{319}{}%
\contentsline {subsubsection}{Decomposing complex expressions}{320}{}%
\contentsline {subsection}{Potential Pitfalls}{322}{}%
\contentsline {subsubsection}{Surprising number of template instantiations with string literals}{322}{}%
\contentsline {subsubsection}{{\tt std::forward<T>} can enable move operations}{324}{}%
\contentsline {subsubsection}{A perfect-forwarding constructor can hijack the copy constructor}{324}{}%
\contentsline {subsection}{Annoyances}{326}{}%
\contentsline {subsubsection}{Forwarding references look just like rvalue references}{326}{}%
\contentsline {subsubsection}{Metafunctions are required in constraints}{327}{}%
\contentsline {subsection}{See Also}{328}{}%
\contentsline {subsection}{Further Reading}{328}{}%
\contentsline {section}{Generalized PODs}{329}{}%
\contentsline {section}{\tt initializer\_list}{330}{}%
\contentsline {section}{Lambdas}{331}{}%
\contentsline {section}{{\tt noexcept} Operator}{332}{}%
\contentsline {section}{Range {\tt for}}{333}{}%
\contentsline {section}{{\itshape rvalue} References}{334}{}%
\contentsline {section}{{\tt union} '11}{335}{}%
\contentsline {subsection}{Description}{335}{}%
\contentsline {subsection}{Use Cases}{338}{}%
\contentsline {subsubsection}{Implementing a \textbf {sum type} as a discriminated {\tt union}}{338}{}%
\contentsline {subsection}{Potential Pitfalls}{340}{}%
\contentsline {subsubsection}{Inadvertent misuse can lead to latent \textbf {undefined behavior} at runtime}{340}{}%
\contentsline {subsection}{Annoyances}{341}{}%
\contentsline {subsection}{See Also}{341}{}%
\contentsline {subsection}{Further Reading}{341}{}%
\contentsline {section}{User-Defined Literals}{342}{}%
\contentsline {section}{Variadic Templates}{343}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {2.2}C++14}{343}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{{\itshape Generic} Lambdas}{344}{}%
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{Short Title}{345}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}3}{Unsafe Features}}{347}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {3.1}C++11}{347}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\tt carries\_dependency}{348}{}%
\contentsline {section}{\tt final}{350}{}%
\contentsline {section}{{\tt noexcept} Specifier}{351}{}%
\contentsline {section}{Ref-Qualifiers}{352}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {3.2}C++14}{352}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{Deduced Return Type}{353}{}%
\contentsline {section}{\tt decltypeauto}{354}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}4}{Parting Thoughts}}{355}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{Testing Section}{355}{}%
\contentsline {section}{Testing Another Section}{355}{}%
\contentsline {chapter}{{Bibliography}}{357}{}%
\contentsline {chapter}{{Glossary}}{363}{}%
\contentsline {chapter}{Index}{383}{}%
