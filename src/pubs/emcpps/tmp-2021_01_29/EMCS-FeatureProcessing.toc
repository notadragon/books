\contentsline {chapter}{{Foreword}}{xi}{}%
\contentsline {chapter}{{Preface}}{xiii}{}%
\contentsline {chapter}{{Acknowledgments}}{xvii}{}%
\contentsline {chapter}{{About the Authors}}{xix}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}0}{Introduction}}{1}{}%
\contentsline {section}{What Makes This Book Different}{1}{}%
\contentsline {section}{Scope for the First Edition}{2}{}%
\contentsline {section}{The {\itshape EMC++S} White Paper}{3}{}%
\contentsline {subsection}{Facts (Not Opinions)}{3}{}%
\contentsline {subsection}{Elucidation (Not Prescription)}{3}{}%
\contentsline {subsection}{Brevity (Not Verbosity)}{3}{}%
\contentsline {subsection}{Real-World (Not Contrived) Examples}{4}{}%
\contentsline {subsection}{At Scale (Not Overly Simplistic) Programs}{4}{}%
\contentsline {section}{What Do We Mean by {\sffamily \itshape Safely}?}{4}{}%
\contentsline {section}{A {\sffamily \itshape Safe} Feature}{5}{}%
\contentsline {section}{A {\sffamily \itshape Conditionally Safe} Feature}{5}{}%
\contentsline {section}{An {\sffamily \itshape Unsafe} Feature}{6}{}%
\contentsline {section}{Modern C++ Feature Catalog}{6}{}%
\contentsline {subsection}{Organization}{6}{}%
\contentsline {section}{How To Use This Book}{7}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}1}{Safe Features}}{9}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {1.1}C++11}{9}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\tt alignof}{10}{}%
\contentsline {subsection}{Description}{10}{}%
\contentsline {subsubsection}{\tt {alignof} Fundamental Types}{10}{}%
\contentsline {subsubsection}{\tt {alignof} User-Defined Types}{10}{}%
\contentsline {subsection}{Use Cases}{11}{}%
\contentsline {subsubsection}{Probing the alignment of a type during development}{11}{}%
\contentsline {subsubsection}{Determining if a given buffer is sufficiently aligned}{13}{}%
\contentsline {subsubsection}{Monotonic memory allocation}{15}{}%
\contentsline {subsection}{Annoyances}{18}{}%
\contentsline {subsubsection}{\tt {alignof} (unlike \tt {sizeof}) is defined only on types}{18}{}%
\contentsline {subsection}{See Also}{19}{}%
\contentsline {subsection}{Further Reading}{19}{}%
\contentsline {section}{Attribute Syntax}{20}{}%
\contentsline {subsection}{Description}{20}{}%
\contentsline {subsubsection}{C++ attribute syntax}{20}{}%
\contentsline {subsubsection}{C++ attribute placement}{21}{}%
\contentsline {subsubsection}{Common compiler-dependent attributes}{21}{}%
\contentsline {subsection}{Use Cases}{22}{}%
\contentsline {subsubsection}{Prompting useful compiler diagnostics}{22}{}%
\contentsline {subsubsection}{Hinting at additional optimization opportunities}{23}{}%
\contentsline {subsubsection}{Stating explicit assumptions in code to achieve better optimizations}{23}{}%
\contentsline {subsubsection}{Using attributes to control external static analysis}{24}{}%
\contentsline {subsubsection}{Creating new attributes to express semantic properties}{25}{}%
\contentsline {subsection}{Potential Pitfalls}{26}{}%
\contentsline {subsubsection}{Unrecognized attributes have implementation-defined behavior}{26}{}%
\contentsline {subsubsection}{Some attributes, if misused, can affect program correctness}{26}{}%
\contentsline {subsection}{Annoyances}{26}{}%
\contentsline {subsection}{See Also}{26}{}%
\contentsline {subsection}{Further Reading}{27}{}%
\contentsline {section}{Consecutive {\tt >}s}{28}{}%
\contentsline {subsection}{Description}{28}{}%
\contentsline {subsubsection}{Using the greater-than or right-shift operators within template-argument expressions}{28}{}%
\contentsline {subsection}{Use Cases}{29}{}%
\contentsline {subsubsection}{Avoiding annoying whitespace when composing template types}{29}{}%
\contentsline {subsection}{Potential Pitfalls}{29}{}%
\contentsline {subsubsection}{Some C++03 programs may stop compiling in C++11}{29}{}%
\contentsline {subsubsection}{The meaning of a C++03 program can, in theory, silently change in C++11}{29}{}%
\contentsline {subsection}{Annoyances}{30}{}%
\contentsline {subsection}{See Also}{30}{}%
\contentsline {subsection}{Further Reading}{30}{}%
\contentsline {section}{Delegating Ctors}{31}{}%
\contentsline {subsection}{Description}{31}{}%
\contentsline {subsection}{Use Cases}{32}{}%
\contentsline {subsubsection}{Avoiding code duplication among constructors}{32}{}%
\contentsline {subsection}{Potential Pitfalls}{35}{}%
\contentsline {subsubsection}{Delegation cycles}{35}{}%
\contentsline {subsubsection}{Suboptimal factoring}{35}{}%
\contentsline {subsection}{Annoyances}{36}{}%
\contentsline {subsection}{See Also}{36}{}%
\contentsline {subsection}{Further Reading}{36}{}%
\contentsline {section}{\tt {decltype}}{37}{}%
\contentsline {subsection}{Description}{37}{}%
\contentsline {subsubsection}{Use with entities}{37}{}%
\contentsline {subsubsection}{Use with expressions}{37}{}%
\contentsline {subsection}{Use Cases}{38}{}%
\contentsline {subsubsection}{Avoiding unnecessary use of explicit typenames}{38}{}%
\contentsline {subsubsection}{Expressing type-consistency explicitly}{39}{}%
\contentsline {subsubsection}{Creating an auxiliary variable of generic type}{40}{}%
\contentsline {subsubsection}{Determining the validity of a generic expression}{40}{}%
\contentsline {subsection}{Potential Pitfalls}{42}{}%
\contentsline {subsection}{Annoyances}{42}{}%
\contentsline {subsubsection}{Mechanical repetition of expressions might be required}{42}{}%
\contentsline {subsection}{See Also}{43}{}%
\contentsline {subsection}{Further Reading}{43}{}%
\contentsline {section}{Defaulted Functions}{44}{}%
\contentsline {subsection}{Description}{44}{}%
\contentsline {subsubsection}{Declaring a special member function explicitly}{44}{}%
\contentsline {paragraph}{Example 1: Providing just the default constructor}{44}{}%
\contentsline {paragraph}{Example 2: Providing just a copy constructor}{44}{}%
\contentsline {paragraph}{Example 3: Providing just the destructor}{45}{}%
\contentsline {paragraph}{Example 4: Providing more than one special member function}{45}{}%
\contentsline {subsubsection}{Defaulting the first declaration of a special member function explicitly}{45}{}%
\contentsline {subsubsection}{Defaulting the implementation of a user-provided special member function}{46}{}%
\contentsline {subsection}{Use Cases}{47}{}%
\contentsline {subsubsection}{Restoring the generation of a special member function suppressed by another}{47}{}%
\contentsline {subsubsection}{Making class APIs explicit at no runtime cost}{48}{}%
\contentsline {subsubsection}{Preserving type triviality}{50}{}%
\contentsline {subsubsection}{Physically decoupling the interface from the implementation}{51}{}%
\contentsline {subsection}{Potential Pitfalls}{52}{}%
\contentsline {subsubsection}{Generation of defaulted functions is not guaranteed}{52}{}%
\contentsline {subsection}{Annoyances}{53}{}%
\contentsline {subsubsection}{Defaulted special member functions cannot restore trivial copyability}{53}{}%
\contentsline {subsection}{See Also}{53}{}%
\contentsline {subsection}{Further Reading}{53}{}%
\contentsline {subsection}{Appendix: Implicit Generation of Special Member Functions}{54}{}%
\contentsline {section}{Deleted Functions}{55}{}%
\contentsline {subsection}{Description}{55}{}%
\contentsline {subsection}{Use Cases}{55}{}%
\contentsline {subsubsection}{Suppressing special member function generation}{55}{}%
\contentsline {subsubsection}{Preventing a particular implicit conversion}{56}{}%
\contentsline {subsubsection}{Preventing all implicit conversions}{57}{}%
\contentsline {subsubsection}{Hiding a structural (nonpolymorphic) base class's member function}{58}{}%
\contentsline {subsection}{Potential Pitfalls}{59}{}%
\contentsline {subsection}{Annoyances}{59}{}%
\contentsline {subsubsection}{Deleting a function declares it}{59}{}%
\contentsline {subsection}{See Also}{61}{}%
\contentsline {subsection}{Further Reading}{61}{}%
\contentsline {section}{{\tt explicit} Operators}{62}{}%
\contentsline {subsection}{Description}{62}{}%
\contentsline {subsection}{Use Cases}{64}{}%
\contentsline {subsubsection}{Enabling contextual conversions to {\tt bool} as a test for validity}{64}{}%
\contentsline {subsection}{Potential Pitfalls}{66}{}%
\contentsline {subsubsection}{Sometimes implicit conversion is indicated}{66}{}%
\contentsline {subsection}{Sometimes a named function is better}{67}{}%
\contentsline {subsection}{Annoyances}{67}{}%
\contentsline {subsection}{See Also}{67}{}%
\contentsline {subsection}{Further Reading}{67}{}%
\contentsline {section}{Function {\tt static} '11}{68}{}%
\contentsline {subsection}{Description}{68}{}%
\contentsline {subsubsection}{Logger example}{70}{}%
\contentsline {subsubsection}{Multithreaded contexts}{71}{}%
\contentsline {subsection}{Use Cases}{73}{}%
\contentsline {subsubsection}{Meyers Singleton}{73}{}%
\contentsline {subsubsection}{Thread-safe initialization of global objects}{77}{}%
\contentsline {subsection}{Potential Pitfalls}{78}{}%
\contentsline {subsubsection}{Relying on initialization order of \tt {static} objects}{78}{}%
\contentsline {subsubsection}{Depending on order-of-destruction of local objects after {\tt main} returns}{80}{}%
\contentsline {subsection}{Annoyances}{81}{}%
\contentsline {subsubsection}{Overhead in single-threaded applications}{81}{}%
\contentsline {subsection}{See Also}{82}{}%
\contentsline {subsection}{Further Reading}{82}{}%
\contentsline {subsection}{Appendix: C++03 Double-Checked Lock Pattern}{82}{}%
\contentsline {section}{Local Types '11}{85}{}%
\contentsline {subsection}{Description}{85}{}%
\contentsline {subsection}{Use Cases}{86}{}%
\contentsline {subsubsection}{Encapsulating a type within a function}{86}{}%
\contentsline {subsubsection}{Instantiating templates with local function objects as type arguments}{87}{}%
\contentsline {subsubsection}{Configuring algorithms via lambda expressions}{88}{}%
\contentsline {subsection}{Potential Pitfalls}{89}{}%
\contentsline {subsection}{Annoyances}{89}{}%
\contentsline {subsection}{See Also}{89}{}%
\contentsline {subsection}{Further Reading}{89}{}%
\contentsline {section}{{\tt long} {\tt long}}{90}{}%
\contentsline {subsection}{Description}{90}{}%
\contentsline {subsection}{Use Cases}{90}{}%
\contentsline {subsubsection}{Storing values that won't safely fit in 32 bits}{90}{}%
\contentsline {subsection}{Potential Pitfalls}{92}{}%
\contentsline {subsubsection}{Relying on the relative sizes of \lstinline !int!, \lstinline !long!, and \lstinline !long!\nobreakspace {}\lstinline !long!}{92}{}%
\contentsline {subsection}{See Also}{93}{}%
\contentsline {subsection}{Further Reading}{93}{}%
\contentsline {subsection}{Appendix: Historical Perspective on the Evolution of Use of Fundamental Integral Types}{93}{}%
\contentsline {section}{\tt noreturn}{95}{}%
\contentsline {subsection}{Description}{95}{}%
\contentsline {subsection}{Use Cases}{95}{}%
\contentsline {subsubsection}{Better compiler diagnostics}{95}{}%
\contentsline {subsubsection}{Improved runtime performance}{96}{}%
\contentsline {subsection}{Potential Pitfalls}{97}{}%
\contentsline {subsubsection}{\tt {[[noreturn]]} can inadvertently break an otherwise working program}{97}{}%
\contentsline {subsubsection}{Misuse of {\tt [[noreturn]]} on function pointers}{97}{}%
\contentsline {subsection}{Annoyances}{98}{}%
\contentsline {subsection}{See Also}{98}{}%
\contentsline {subsection}{Further Reading}{98}{}%
\contentsline {section}{\tt nullptr}{99}{}%
\contentsline {subsection}{Description}{99}{}%
\contentsline {subsection}{Use Cases}{100}{}%
\contentsline {subsubsection}{Improvement of type safety}{100}{}%
\contentsline {subsubsection}{Disambiguation of \lstinline !(int)0! vs. \lstinline !(T*)0! during overload resolution}{101}{}%
\contentsline {subsubsection}{Overloading for a literal null pointer}{102}{}%
\contentsline {subsection}{Potential Pitfalls}{102}{}%
\contentsline {subsection}{Annoyances}{102}{}%
\contentsline {subsection}{See Also}{102}{}%
\contentsline {subsection}{Further Reading}{102}{}%
\contentsline {section}{\tt override}{103}{}%
\contentsline {subsection}{Description}{103}{}%
\contentsline {subsection}{Use Cases}{104}{}%
\contentsline {subsubsection}{Ensuring that a member function of a base class is being overridden}{104}{}%
\contentsline {subsection}{Potential Pitfalls}{105}{}%
\contentsline {subsubsection}{Lack of consistency across a codebase}{105}{}%
\contentsline {subsection}{Annoyances}{105}{}%
\contentsline {subsection}{See Also}{105}{}%
\contentsline {subsection}{Further Reading}{105}{}%
\contentsline {section}{Raw String Literals}{106}{}%
\contentsline {subsection}{Description}{106}{}%
\contentsline {subsubsection}{Collisions}{107}{}%
\contentsline {subsection}{Use Cases}{109}{}%
\contentsline {subsubsection}{Embedding code in a C++ program}{109}{}%
\contentsline {subsection}{Potential Pitfalls}{109}{}%
\contentsline {subsubsection}{Unexpected indentation}{109}{}%
\contentsline {subsubsection}{Encoding of new lines and whitespace}{110}{}%
\contentsline {subsection}{Annoyances}{111}{}%
\contentsline {subsection}{See Also}{111}{}%
\contentsline {subsection}{Further Reading}{111}{}%
\contentsline {section}{\tt static\_assert}{112}{}%
\contentsline {subsection}{Description}{112}{}%
\contentsline {subsubsection}{Syntax and semantics}{112}{}%
\contentsline {subsubsection}{Evaluation of static assertions in templates}{113}{}%
\contentsline {subsection}{Use Cases}{114}{}%
\contentsline {subsubsection}{Verifying assumptions about the target platform}{114}{}%
\contentsline {subsubsection}{Preventing misuse of class and function templates}{115}{}%
\contentsline {subsection}{Potential Pitfalls}{116}{}%
\contentsline {subsubsection}{Static assertions in templates can trigger unintended compilation failures}{116}{}%
\contentsline {subsubsection}{Misuse of static assertions to restrict overload sets}{117}{}%
\contentsline {subsection}{Annoyances}{119}{}%
\contentsline {subsubsection}{Mandatory string literal}{119}{}%
\contentsline {subsection}{See Also}{119}{}%
\contentsline {subsection}{Further Reading}{119}{}%
\contentsline {section}{Trailing Return}{120}{}%
\contentsline {subsection}{Description}{120}{}%
\contentsline {subsection}{Use Cases}{122}{}%
\contentsline {subsubsection}{Function template whose return type depends on a parameter type}{122}{}%
\contentsline {subsubsection}{Avoiding having to qualify names redundantly in return types}{122}{}%
\contentsline {subsubsection}{Improving readability of declarations involving function pointers}{123}{}%
\contentsline {subsection}{Potential Pitfalls}{123}{}%
\contentsline {subsection}{Annoyances}{123}{}%
\contentsline {subsection}{See Also}{123}{}%
\contentsline {subsection}{Further Reading}{124}{}%
\contentsline {section}{Unicode Literals}{125}{}%
\contentsline {subsection}{Description}{125}{}%
\contentsline {subsection}{Use Cases}{126}{}%
\contentsline {subsubsection}{Guaranteed-portable encodings of literals}{126}{}%
\contentsline {subsection}{Potential Pitfalls}{126}{}%
\contentsline {subsubsection}{Embedding Unicode graphemes}{126}{}%
\contentsline {subsubsection}{Lack of library support for Unicode}{126}{}%
\contentsline {subsubsection}{UTF-8 quirks}{127}{}%
\contentsline {subsection}{Annoyances}{127}{}%
\contentsline {subsection}{See Also}{127}{}%
\contentsline {subsection}{Further Reading}{127}{}%
\contentsline {section}{{\tt using} Aliases}{128}{}%
\contentsline {subsection}{Description}{128}{}%
\contentsline {subsection}{Use Cases}{129}{}%
\contentsline {subsubsection}{Simplifying convoluted \lstinline !typedef! declarations}{129}{}%
\contentsline {subsubsection}{Binding template arguments}{130}{}%
\contentsline {subsubsection}{Providing a shorthand notation for type traits}{130}{}%
\contentsline {subsection}{Potential Pitfalls}{131}{}%
\contentsline {subsection}{Annoyances}{131}{}%
\contentsline {subsection}{See Also}{131}{}%
\contentsline {subsection}{Further Reading}{132}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {1.2}C++14}{132}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{Aggregate Init '14}{133}{}%
\contentsline {subsection}{Description}{133}{}%
\contentsline {subsection}{Use Cases}{134}{}%
\contentsline {subsubsection}{Configuration \lstinline !struct!s}{134}{}%
\contentsline {subsection}{Potential Pitfalls}{134}{}%
\contentsline {subsection}{Annoyances}{135}{}%
\contentsline {subsubsection}{Syntactical ambiguity in the presence of brace elision}{135}{}%
\contentsline {subsection}{See Also}{135}{}%
\contentsline {subsection}{Further Reading}{136}{}%
\contentsline {section}{Binary Literals}{137}{}%
\contentsline {subsection}{Description}{137}{}%
\contentsline {subsection}{Use Cases}{138}{}%
\contentsline {subsubsection}{Bit masking and bitwise operations}{138}{}%
\contentsline {subsubsection}{Replicating constant binary data}{139}{}%
\contentsline {subsection}{Potential Pitfalls}{140}{}%
\contentsline {subsection}{Annoyances}{140}{}%
\contentsline {subsection}{See Also}{141}{}%
\contentsline {subsection}{Further Reading}{141}{}%
\contentsline {section}{\tt deprecated}{142}{}%
\contentsline {subsection}{Description}{142}{}%
\contentsline {subsection}{Use Cases}{143}{}%
\contentsline {subsubsection}{Discouraging use of an obsolete or unsafe \textbf {entity}}{143}{}%
\contentsline {subsection}{Potential Pitfalls}{144}{}%
\contentsline {subsubsection}{Interaction with {\tt -Werror} (e.g., GCC, Clang) or {\tt /WX} (MSVC)}{144}{}%
\contentsline {subsection}{Annoyances}{145}{}%
\contentsline {subsection}{See Also}{145}{}%
\contentsline {subsection}{Further Reading}{145}{}%
\contentsline {section}{Digit Separators}{146}{}%
\contentsline {subsection}{Description}{146}{}%
\contentsline {subsection}{Use Cases}{147}{}%
\contentsline {subsubsection}{Grouping digits together in large constants}{147}{}%
\contentsline {subsection}{Potential Pitfalls}{147}{}%
\contentsline {subsection}{See Also}{147}{}%
\contentsline {subsection}{Further Reading}{148}{}%
\contentsline {subsection}{Appendix: Silent Loss of Precision in Floating-Point Literals}{148}{}%
\contentsline {section}{Lambda Captures}{151}{}%
\contentsline {subsection}{Description}{151}{}%
\contentsline {subsection}{Use Cases}{153}{}%
\contentsline {subsubsection}{Moving (as opposed to copying) objects into a closure}{153}{}%
\contentsline {subsubsection}{Providing mutable state for a closure}{154}{}%
\contentsline {subsubsection}{Capturing a modifiable copy of an existing {\ttfamily const} variable}{154}{}%
\contentsline {subsection}{Potential Pitfalls}{156}{}%
\contentsline {subsubsection}{Forwarding an existing variable into a closure always results in an object (never a reference)}{156}{}%
\contentsline {subsection}{Annoyances}{157}{}%
\contentsline {subsubsection}{There’s no easy way to synthesize a {\ttfamily const} data member}{157}{}%
\contentsline {subsubsection}{{\ttfamily std::function} supports only copyable callable objects}{157}{}%
\contentsline {subsection}{See Also}{158}{}%
\contentsline {subsection}{Further Reading}{158}{}%
\contentsline {section}{Variable Templates}{159}{}%
\contentsline {subsection}{Description}{159}{}%
\contentsline {subsection}{Use Cases}{161}{}%
\contentsline {subsubsection}{Parameterized constants}{161}{}%
\contentsline {subsubsection}{Reducing verbosity of type traits}{162}{}%
\contentsline {subsection}{Potential Pitfalls}{164}{}%
\contentsline {subsubsection}{Recursive variable template initializations require {\tt const} or {\tt constexpr}}{164}{}%
\contentsline {subsection}{Annoyances}{166}{}%
\contentsline {subsubsection}{Variable templates do not support template template parameters}{166}{}%
\contentsline {subsection}{See Also}{166}{}%
\contentsline {subsection}{Further Reading}{166}{}%
\contentsline {section}{{\tt constexpr} Functions '14}{167}{}%
\contentsline {subsection}{Description}{167}{}%
\contentsline {subsection}{Use Cases}{168}{}%
\contentsline {subsubsection}{Nonrecursive {\tt constexpr} algorithms}{168}{}%
\contentsline {subsubsection}{Optimized metaprogramming algorithms}{170}{}%
\contentsline {subsection}{Potential Pitfalls}{173}{}%
\contentsline {subsection}{Annoyances}{173}{}%
\contentsline {subsection}{See Also}{173}{}%
\contentsline {subsection}{Further Reading}{174}{}%
\contentsline {subsection}{Appendix: Optimized C++11 Example Algorithms}{174}{}%
\contentsline {subsubsection}{Recursive Fibonacci}{174}{}%
\contentsline {subsubsection}{{\ttfamily constexpr} type list {\ttfamily Count} algorithm}{174}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}2}{Conditionally Safe Features}}{177}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {2.1}C++11}{177}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{{\tt alignas}\nobreakspace {}}{178}{}%
\contentsline {subsection}{Description}{178}{}%
\contentsline {subsubsection}{Restricting the alignment of a particular object}{178}{}%
\contentsline {subsubsection}{Restricting the alignment of a user-defined type}{179}{}%
\contentsline {subsubsection}{Restricting the alignment of individual data members}{180}{}%
\contentsline {subsubsection}{Matching the alignment of another type}{180}{}%
\contentsline {subsection}{Use Cases}{181}{}%
\contentsline {subsubsection}{Creating a sufficiently aligned object buffer}{181}{}%
\contentsline {subsubsection}{Ensuring proper alignment for architecture-specific instructions}{182}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} among distinct objects in a multi-threaded program}{183}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} within a single thread-aware object}{184}{}%
\contentsline {subsection}{Potential Pitfalls}{184}{}%
\contentsline {subsubsection}{Underspecifying alignment is not universally reported}{184}{}%
\contentsline {subsubsection}{Incompatibly specifying alignment is \textbf {IFNDR}}{185}{}%
\contentsline {subsubsection}{Stricter alignment might reduce cache utilization}{186}{}%
\contentsline {subsection}{See Also}{186}{}%
\contentsline {subsection}{Further Reading}{186}{}%
\contentsline {subsection}{Appendix}{186}{}%
\contentsline {subsubsection}{Natural Alignment}{186}{}%
\contentsline {subsubsection}{Cache lines; L1, L2, and L3 cache; pages; and virtual memory}{188}{}%
\contentsline {section}{{\tt auto} Variables}{191}{}%
\contentsline {section}{Braced Init}{192}{}%
\contentsline {section}{{\tt constexpr} Functions}{193}{}%
\contentsline {section}{{\tt constexpr} Variables}{194}{}%
\contentsline {section}{Inheriting Ctors}{195}{}%
\contentsline {subsection}{Description}{195}{}%
\contentsline {subsection}{Use Cases}{199}{}%
\contentsline {subsubsection}{Abstract use case}{199}{}%
\contentsline {subsubsection}{Avoiding boilerplate code when employing structural inheritance}{199}{}%
\contentsline {subsubsection}{Avoiding boilerplate code when employing implementation inheritance}{200}{}%
\contentsline {subsubsection}{Implementing a strong {\tt typedef}}{201}{}%
\contentsline {subsubsection}{Incorporating reusable functionality via a mix-in}{203}{}%
\contentsline {subsection}{Potential Pitfalls}{204}{}%
\contentsline {subsubsection}{Newly introduced constructors in the base class can silently alter program behavior}{204}{}%
\contentsline {subsubsection}{Beware of inheriting implicit constructors}{205}{}%
\contentsline {subsection}{Annoyances}{207}{}%
\contentsline {subsubsection}{Inherited constructors cannot be selected individually}{207}{}%
\contentsline {subsubsection}{Access levels of inherited constructors are the same as in base class}{208}{}%
\contentsline {subsection}{See Also}{209}{}%
\contentsline {subsection}{Further Reading}{210}{}%
\contentsline {subsection}{Appendix: C++17 Improvements Made Retroactive to C++11/14}{210}{}%
\contentsline {subsubsection}{Inheriting constructors declared with a C-style ellipsis}{210}{}%
\contentsline {subsubsection}{Inheriting constructors that rely on friendship to declare function parameters}{211}{}%
\contentsline {subsubsection}{Inheriting constructor templates would be ill formed for a local class}{212}{}%
\contentsline {subsubsection}{SFINAE evaluation context with default function arguments}{212}{}%
\contentsline {subsubsection}{Suppression of constructors in the presence of default arguments}{213}{}%
\contentsline {subsubsection}{Suprising behavior with unary constructor templates}{213}{}%
\contentsline {section}{Default Member Init}{215}{}%
\contentsline {section}{{\tt enum} {\tt class}}{216}{}%
\contentsline {subsection}{Description}{216}{}%
\contentsline {subsubsection}{Drawbacks and workarounds relating to unscoped C++03 enumerations}{216}{}%
\contentsline {subsubsection}{Drawbacks relating to weakly typed, C++03 enumerators}{217}{}%
\contentsline {subsubsection}{Introducing the C++11 {\tt enum class}}{218}{}%
\contentsline {subsubsection}{{\tt enum} {\tt class} and underlying type}{220}{}%
\contentsline {subsection}{Use Cases}{220}{}%
\contentsline {subsubsection}{Avoiding unintended implicit conversions to arithmetic types}{220}{}%
\contentsline {subsubsection}{Avoiding namespace pollution}{222}{}%
\contentsline {subsubsection}{Improving overloading disambiguation}{223}{}%
\contentsline {subsubsection}{Encapsulating implementation details within the enumerators themselves}{226}{}%
\contentsline {subsection}{Potential Pitfalls}{227}{}%
\contentsline {subsubsection}{Strong typing of an {\tt enum} {\tt class} can be counterproductive}{227}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} for collections of named constants}{228}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} in association with bit flags}{229}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} in association with iteration}{230}{}%
\contentsline {subsubsection}{External use of opaque enumerators}{232}{}%
\contentsline {subsection}{Annoyances}{232}{}%
\contentsline {subsubsection}{Scoped enumerations do not necessarily add value}{232}{}%
\contentsline {subsection}{See Also}{233}{}%
\contentsline {subsection}{Further Reading}{233}{}%
\contentsline {section}{Opaque {\tt enum}s}{234}{}%
\contentsline {subsection}{Description}{234}{}%
\contentsline {subsection}{Use Cases}{235}{}%
\contentsline {subsubsection}{Using opaque enumerations within a header file}{235}{}%
\contentsline {subsubsection}{Cookie: Insulating all external clients from the enumerator list}{238}{}%
\contentsline {subsubsection}{Dual-Access: Insulating some external clients from the enumerator list}{244}{}%
\contentsline {subsection}{Potential Pitfalls}{247}{}%
\contentsline {subsubsection}{Redeclaring an externally defined enumeration locally}{247}{}%
\contentsline {subsubsection}{Inciting local enumeration declarations: an attractive nuisance}{248}{}%
\contentsline {subsection}{Annoyances}{249}{}%
\contentsline {subsubsection}{Opaque enumerations are not completely type safe}{249}{}%
\contentsline {subsection}{See Also}{249}{}%
\contentsline {subsection}{Further Reading}{249}{}%
\contentsline {section}{Underlying Type '11}{251}{}%
\contentsline {subsection}{Description}{251}{}%
\contentsline {subsubsection}{Specifying underlying type explicitly}{251}{}%
\contentsline {subsection}{Use Cases}{252}{}%
\contentsline {subsubsection}{Ensuring a compact representation where enumerator values are salient}{252}{}%
\contentsline {subsection}{Potential Pitfalls}{253}{}%
\contentsline {subsubsection}{External use of opaque enumerators}{253}{}%
\contentsline {subsubsection}{Subtleties of integral promotion}{254}{}%
\contentsline {subsection}{See Also}{255}{}%
\contentsline {subsection}{Further Reading}{255}{}%
\contentsline {section}{{\tt friend} '11}{256}{}%
\contentsline {subsection}{Description}{256}{}%
\contentsline {subsection}{Use Cases}{258}{}%
\contentsline {subsubsection}{Safely declaring a previously declared type to be a friend}{258}{}%
\contentsline {subsubsection}{Befriending a type alias used as a customization point}{259}{}%
\contentsline {subsubsection}{Using the {\tt PassKey} idiom to enforce initialization}{260}{}%
\contentsline {subsubsection}{Granting a specific type access to a single {\tt private} function}{262}{}%
\contentsline {subsubsection}{Curiously recurring template pattern}{265}{}%
\contentsline {subsection}{Potential Pitfalls}{265}{}%
\contentsline {subsubsection}{Long-distance friendship}{265}{}%
\contentsline {subsection}{See Also}{265}{}%
\contentsline {subsection}{Further Reading}{265}{}%
\contentsline {subsection}{Appendix: Curiously Recurring Template Pattern Use Cases}{266}{}%
\contentsline {subsubsection}{Refactoring using the curiously recurring template pattern}{266}{}%
\contentsline {subsubsection}{Synthesizing equality using the curiously recurring template pattern}{268}{}%
\contentsline {subsubsection}{Compile-time polymorphism using the curiously recurring template pattern}{270}{}%
\contentsline {subsubsection}{Compile-time visitor using the curiously recurring template pattern}{273}{}%
\contentsline {section}{{\tt extern} {\tt template}}{278}{}%
\contentsline {subsection}{Description}{278}{}%
\contentsline {subsubsection}{Explicit-instantiation definition}{278}{}%
\contentsline {subsubsection}{Explicit-instantiation declaration}{279}{}%
\contentsline {subsubsection}{A more complete illustrative example}{280}{}%
\contentsline {subsubsection}{The effect on various \lstinline !.o! files}{283}{}%
\contentsline {subsection}{Use Cases}{289}{}%
\contentsline {subsubsection}{Reducing template code bloat in object files}{289}{}%
\contentsline {subsubsection}{Insulating template definitions from clients}{293}{}%
\contentsline {subsection}{Potential Pitfalls}{294}{}%
\contentsline {subsubsection}{Corresponding explicit-instantiation declarations and definitions}{294}{}%
\contentsline {subsubsection}{Accidentally making matters worse}{296}{}%
\contentsline {subsection}{Annoyances}{296}{}%
\contentsline {subsubsection}{No good place to put definitions for unrelated classes}{296}{}%
\contentsline {subsubsection}{All members of an explicitly defined template class must be valid}{297}{}%
\contentsline {subsection}{See Also}{299}{}%
\contentsline {subsection}{Further Reading}{299}{}%
\contentsline {section}{Forwarding References}{300}{}%
\contentsline {subsection}{Description}{300}{}%
\contentsline {subsubsection}{A brief review of function template argument deduction}{302}{}%
\contentsline {subsubsection}{Reference collapsing}{303}{}%
\contentsline {subsubsection}{Identifying forwarding references}{304}{}%
\contentsline {subsubsection}{{\tt auto\&\&} --- a forwarding reference in a non-parameter context}{305}{}%
\contentsline {subsubsection}{Forwarding references without forwarding}{306}{}%
\contentsline {subsubsection}{The {\tt std::forward} utility}{307}{}%
\contentsline {subsection}{Use Cases}{307}{}%
\contentsline {subsubsection}{Perfectly forwarding an expression to a downstream consumer}{307}{}%
\contentsline {subsubsection}{Handling multiple parameters concisely}{308}{}%
\contentsline {subsubsection}{Perfect forwarding for generic factory functions}{309}{}%
\contentsline {subsubsection}{Wrapping initialization in a generic factory function}{310}{}%
\contentsline {subsubsection}{Emplacement}{311}{}%
\contentsline {subsubsection}{Decomposing complex expressions}{312}{}%
\contentsline {subsection}{Potential Pitfalls}{314}{}%
\contentsline {subsubsection}{Surprising number of template instantiations with string literals}{314}{}%
\contentsline {subsubsection}{{\tt std::forward<T>} can enable move operations}{316}{}%
\contentsline {subsubsection}{A perfect-forwarding constructor can hijack the copy constructor}{316}{}%
\contentsline {subsection}{Annoyances}{318}{}%
\contentsline {subsubsection}{Forwarding references look just like rvalue references}{318}{}%
\contentsline {subsubsection}{Metafunctions are required in constraints}{319}{}%
\contentsline {subsection}{See Also}{320}{}%
\contentsline {subsection}{Further Reading}{320}{}%
\contentsline {section}{Generalized PODs}{321}{}%
\contentsline {section}{\tt initializer\_list}{322}{}%
\contentsline {section}{Lambdas}{323}{}%
\contentsline {section}{{\tt noexcept} Operator}{324}{}%
\contentsline {section}{Range {\tt for}}{325}{}%
\contentsline {section}{{\itshape rvalue} References}{326}{}%
\contentsline {section}{{\tt union} '11}{327}{}%
\contentsline {subsection}{Description}{327}{}%
\contentsline {subsection}{Use Cases}{330}{}%
\contentsline {subsubsection}{Implementing a \textbf {sum type} as a discriminated {\tt union}}{330}{}%
\contentsline {subsection}{Potential Pitfalls}{332}{}%
\contentsline {subsubsection}{Inadvertent misuse can lead to latent \textbf {undefined behavior} at runtime}{332}{}%
\contentsline {subsection}{Annoyances}{333}{}%
\contentsline {subsection}{See Also}{333}{}%
\contentsline {subsection}{Further Reading}{333}{}%
\contentsline {section}{User-Defined Literals}{334}{}%
\contentsline {section}{Variadic Templates}{335}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {2.2}C++14}{335}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{{\itshape Generic} Lambdas}{336}{}%
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{Short Title}{337}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}3}{Unsafe Features}}{339}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {3.1}C++11}{339}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\tt carries\_dependency}{340}{}%
\contentsline {section}{\tt final}{342}{}%
\contentsline {section}{{\tt inline} {\tt namespace}}{343}{}%
\contentsline {subsection}{Description}{343}{}%
\contentsline {subsubsection}{Loss of access to duplicate names in enclosing namespace}{344}{}%
\contentsline {subsubsection}{Argument-dependent–lookup interoperability across {\tt inline} {\tt namespace} boundaries}{346}{}%
\contentsline {subsubsection}{The ability to specialize templates declared in a nested {\tt inline} namespace}{347}{}%
\contentsline {subsubsection}{Reopening namespaces can reopen nested {\tt inline} ones}{348}{}%
\contentsline {subsection}{Use Cases}{349}{}%
\contentsline {subsubsection}{Facilitating API migration}{349}{}%
\contentsline {subsubsection}{Link-safe ABI versioning}{354}{}%
\contentsline {subsubsection}{Build modes and ABI link safety}{358}{}%
\contentsline {subsubsection}{Enabling selective {\tt using} directives for short-named entities}{361}{}%
\contentsline {subsection}{Potential Pitfalls}{362}{}%
\contentsline {subsubsection}{{\tt inline}-namespace-based versioning doesn’t scale}{362}{}%
\contentsline {subsubsection}{Specializing templates in {\tt std} can be problematic}{364}{}%
\contentsline {subsubsection}{Inconsistent use of {\tt inline} keyword is \textbf {ill formed, no diagnostic required}}{365}{}%
\contentsline {subsection}{Annoyances}{365}{}%
\contentsline {subsubsection}{Inability to redeclare across namespaces impedes code factoring}{365}{}%
\contentsline {subsubsection}{Only one namespace can contain any given {\tt inline} namespace}{368}{}%
\contentsline {subsection}{See Also}{368}{}%
\contentsline {subsection}{Further Reading}{369}{}%
\contentsline {subsection}{Appendix: Case study of using {\tt inline} namespaces for versioning}{369}{}%
\contentsline {section}{{\tt noexcept} Specifier}{371}{}%
\contentsline {section}{Ref-Qualifiers}{372}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {3.2}C++14}{372}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{Deduced Return Type}{373}{}%
\contentsline {section}{\tt decltypeauto}{374}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}4}{Parting Thoughts}}{375}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{Testing Section}{375}{}%
\contentsline {section}{Testing Another Section}{375}{}%
\contentsline {chapter}{{Bibliography}}{377}{}%
\contentsline {chapter}{{Glossary}}{383}{}%
\contentsline {chapter}{Index}{403}{}%
