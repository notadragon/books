\contentsline {chapter}{{Preface}}{xi}{}%
\contentsline {chapter}{{Acknowledgments}}{xv}{}%
\contentsline {chapter}{{About the Authors}}{xvii}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}0}{Introduction}}{1}{}%
\contentsline {section}{What Makes This Book Different}{1}{}%
\contentsline {section}{Scope for the First Edition}{2}{}%
\contentsline {section}{The {\itshape EMC++S} White Paper}{3}{}%
\contentsline {subsection}{Facts (Not Opinions)}{3}{}%
\contentsline {subsection}{Elucidation (Not Prescription)}{3}{}%
\contentsline {subsection}{Brevity (Not Verbosity)}{4}{}%
\contentsline {subsection}{Real-World (Not Contrived) Examples}{4}{}%
\contentsline {subsection}{At Scale (Not Overly Simplistic) Programs}{4}{}%
\contentsline {section}{What Do We Mean by {\sffamily \itshape Safely}?}{5}{}%
\contentsline {section}{A {\sffamily \itshape Safe} Feature}{5}{}%
\contentsline {section}{A {\sffamily \itshape Conditionally Safe} Feature}{6}{}%
\contentsline {section}{An {\sffamily \itshape Unsafe} Feature}{6}{}%
\contentsline {section}{Modern C++ Feature Catalog}{6}{}%
\contentsline {subsection}{Organization}{7}{}%
\contentsline {section}{How To Use This Book}{7}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}1}{Safe Features}}{9}{}%
\contentsline {section}{\numberline {1.1}C++11}{9}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\makebox[12em][l]{\sf Binary Literals} Binary Literals}{10}{}%
\contentsline {subsection}{Description}{10}{}%
\contentsline {subsection}{Use Cases}{11}{}%
\contentsline {subsubsection}{Bit masking and bitwise operations}{11}{}%
\contentsline {subsubsection}{Replicating constant binary data}{13}{}%
\contentsline {subsection}{Potential Pitfalls}{14}{}%
\contentsline {subsection}{Annoyances}{14}{}%
\contentsline {subsection}{See Also}{14}{}%
\contentsline {subsection}{Further Reading}{14}{}%
\contentsline {section}{\makebox[12em][l]{\sf Consecutive {\TOCCode >}s} Consecutive Right-Angle Brackets}{15}{}%
\contentsline {subsection}{Description}{15}{}%
\contentsline {subsubsection}{Using the greater-than or right-shift operators within template-argument expressions}{15}{}%
\contentsline {subsection}{Use Cases}{16}{}%
\contentsline {subsubsection}{Avoiding annoying whitespace when composing template types}{16}{}%
\contentsline {subsection}{Potential Pitfalls}{16}{}%
\contentsline {subsubsection}{Some C++03 programs may stop compiling in C++11}{16}{}%
\contentsline {subsubsection}{The meaning of a C++03 program can (in theory) silently change in C++11}{16}{}%
\contentsline {subsection}{Annoyances}{18}{}%
\contentsline {subsection}{See Also}{18}{}%
\contentsline {subsection}{Further Reading}{18}{}%
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode decltype} Operator for Extracting Expression Types}{19}{}%
\contentsline {subsection}{Description}{19}{}%
\contentsline {subsubsection}{Use with (typically named) entities}{19}{}%
\contentsline {subsubsection}{Use with expressions (unnamed entities)}{19}{}%
\contentsline {subsection}{Use Cases}{20}{}%
\contentsline {subsubsection}{Avoiding unnecessary use of explicit typenames}{20}{}%
\contentsline {subsubsection}{Expressing type-consistency explicitly}{21}{}%
\contentsline {subsubsection}{Creating an auxiliary variable of generic type}{22}{}%
\contentsline {subsubsection}{Determining the validity of a generic expression}{22}{}%
\contentsline {subsection}{Potential pitfalls}{24}{}%
\contentsline {subsection}{Annoyances}{24}{}%
\contentsline {subsubsection}{Mechanical repetition of expressions might be required}{24}{}%
\contentsline {subsection}{See Also}{25}{}%
\contentsline {subsection}{Further reading}{25}{}%
\contentsline {section}{\makebox[12em][l]{\sf Deleted Functions} Using {\tt =delete} for Arbitrary Functions}{26}{}%
\contentsline {subsection}{Description}{26}{}%
\contentsline {subsection}{Use Cases}{26}{}%
\contentsline {subsubsection}{Suppressing special member function generation}{26}{}%
\contentsline {subsubsection}{Preventing a particular implicit conversion}{28}{}%
\contentsline {subsubsection}{Preventing all implicit conversions}{28}{}%
\contentsline {subsubsection}{Hiding a structural (nonpolymorphic) base class's member function}{29}{}%
\contentsline {subsection}{Potential Pitfalls}{30}{}%
\contentsline {subsection}{Annoyances}{30}{}%
\contentsline {subsection}{See Also}{30}{}%
\contentsline {subsection}{Further Reading}{30}{}%
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode noreturn} The {\tt [[noreturn]]} Attribute}{31}{}%
\contentsline {subsection}{Description}{31}{}%
\contentsline {subsection}{Use Cases}{31}{}%
\contentsline {subsubsection}{Better compiler diagnostics}{31}{}%
\contentsline {subsubsection}{Improved runtime performance}{32}{}%
\contentsline {subsection}{Potential Pitfalls}{33}{}%
\contentsline {subsubsection}{\tt {[[noreturn]]} can inadvertently break an otherwise working program}{33}{}%
\contentsline {subsubsection}{Misuse of {\tt [[noreturn]]} on function pointers}{33}{}%
\contentsline {subsection}{Annoyances}{34}{}%
\contentsline {subsection}{See Also}{34}{}%
\contentsline {subsection}{Further Reading}{34}{}%
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode nullptr} The Null-Pointer-Literal Keyword}{35}{}%
\contentsline {subsection}{Description}{35}{}%
\contentsline {subsection}{Use Cases}{36}{}%
\contentsline {subsubsection}{Improvement of type safety}{36}{}%
\contentsline {subsubsection}{Disambiguation of \lstinline !(int)0! vs. \lstinline !(T*)0! during overload resolution}{37}{}%
\contentsline {subsubsection}{Overloading for a literal null pointer}{38}{}%
\contentsline {subsection}{Potential Pitfalls}{38}{}%
\contentsline {subsection}{Annoyances}{38}{}%
\contentsline {subsection}{See Also}{39}{}%
\contentsline {subsection}{Further Reading}{39}{}%
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode override} The {\tt override} Member-Function Specifier}{40}{}%
\contentsline {subsection}{Description}{40}{}%
\contentsline {subsection}{Use Cases}{41}{}%
\contentsline {subsubsection}{Ensuring that a member function of a base class is being overridden}{41}{}%
\contentsline {subsection}{Potential Pitfalls}{42}{}%
\contentsline {subsubsection}{Lack of consistency across a codebase}{42}{}%
\contentsline {subsection}{Annoyances}{42}{}%
\contentsline {subsection}{See Also}{42}{}%
\contentsline {subsection}{Further Reading}{42}{}%
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode static\_assert} Compile-Time Assertions}{43}{}%
\contentsline {subsection}{Description}{43}{}%
\contentsline {subsubsection}{Syntax and semantics}{43}{}%
\contentsline {subsubsection}{Evaluation of static assertions in templates}{44}{}%
\contentsline {subsection}{Use Cases}{46}{}%
\contentsline {subsubsection}{Verifying assumptions about the target platform}{46}{}%
\contentsline {subsubsection}{Preventing misuse of class and function templates}{46}{}%
\contentsline {subsection}{Potential Pitfalls}{47}{}%
\contentsline {subsubsection}{Static assertions in templates can trigger unintended compilation failures}{47}{}%
\contentsline {subsubsection}{Misuse of static assertions to restrict overload sets}{49}{}%
\contentsline {subsection}{Annoyances}{50}{}%
\contentsline {subsubsection}{Mandatory string literal}{50}{}%
\contentsline {subsection}{See Also}{51}{}%
\contentsline {subsection}{Further reading}{51}{}%
\contentsline {section}{\makebox[12em][l]{\sf Trailing Return} Trailing Function Return Types}{52}{}%
\contentsline {subsection}{Description}{52}{}%
\contentsline {subsection}{Use Cases}{54}{}%
\contentsline {subsubsection}{Function template whose return type depends on a parameter type}{54}{}%
\contentsline {subsubsection}{Avoiding having to qualify names redundantly in return types}{54}{}%
\contentsline {subsubsection}{Improving readability of declarations involving function pointers}{55}{}%
\contentsline {subsection}{Potential Pitfalls}{56}{}%
\contentsline {subsection}{Annoyances}{56}{}%
\contentsline {subsection}{See Also}{56}{}%
\contentsline {subsection}{Further Reading}{56}{}%
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode alignas} The {\tt alignas} Decorator}{57}{}%
\contentsline {subsection}{Description}{57}{}%
\contentsline {subsubsection}{Restricting the alignment of a particular object}{57}{}%
\contentsline {subsubsection}{Restricting the alignment of a user-defined type}{58}{}%
\contentsline {subsubsection}{Restricting the alignment of individual data members}{59}{}%
\contentsline {subsubsection}{Matching the alignment of another type}{60}{}%
\contentsline {subsection}{Use Cases}{60}{}%
\contentsline {subsubsection}{Creating a sufficiently aligned object buffer}{60}{}%
\contentsline {subsubsection}{Ensuring proper alignment for architecture-specific instructions}{61}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} among distinct objects in a multi-threaded program}{62}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} within a single thread-aware object}{63}{}%
\contentsline {subsection}{Potential Pitfalls}{64}{}%
\contentsline {subsubsection}{Underspecifying alignment is not universally reported}{64}{}%
\contentsline {subsubsection}{Incompatibly specifying alignment is \textbf {IFNDR}}{65}{}%
\contentsline {subsubsection}{Stricter alignment might reduce cache utilization}{65}{}%
\contentsline {subsection}{See Also}{66}{}%
\contentsline {subsection}{Further Reading}{66}{}%
\contentsline {subsection}{Appendix}{66}{}%
\contentsline {subsubsection}{Natural Alignment}{66}{}%
\contentsline {subsubsection}{Cache lines; L1, L2, and L3 cache; pages; and virtual memory}{68}{}%
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode deprecated} The {\tt [[deprecated]]} Attribute}{71}{}%
\contentsline {subsection}{Description}{71}{}%
\contentsline {subsection}{Use Cases}{72}{}%
\contentsline {subsubsection}{Discouraging use of an obsolete or unsafe \textbf {entity}}{72}{}%
\contentsline {subsection}{Potential Pitfalls}{74}{}%
\contentsline {subsubsection}{Interaction with {\tt -Werror} (e.g., GCC, Clang) or {\tt /WX} (MSVC)}{74}{}%
\contentsline {subsection}{Annoyances}{74}{}%
\contentsline {subsection}{See Also}{74}{}%
\contentsline {subsection}{Further Reading}{74}{}%
\contentsline {section}{\makebox[12em][l]{\sf Raw String Literals '14} Syntax for Unprocessed String Contents}{75}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\TOCCode using} Aliases} Type/Template Aliases (Extended {\tt typedef})}{76}{}%
\contentsline {section}{\makebox[12em][l]{\sf Defaulted Functions} Using {\tt =default} for Special Member Functions}{77}{}%
\contentsline {section}{\makebox[12em][l]{\sf Attribute Syntax} Generalized Attribute Support}{78}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {1.2}C++14}{78}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\makebox[12em][l]{\sf Digit Separators} The Digit Separator: {\tt '}}{79}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\TOCCode constexpr} Functions '14} Relaxed Restrictions on {\tt constexpr} Functions}{80}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\TOCCode code0} in Short} Longer Wordier Feature Title with {\tt Code0}}{81}{}%
\contentsline {subsection}{Description}{81}{}%
\contentsline {subsubsection}{C++ attribute syntax}{81}{}%
\contentsline {subsection}{Appendix to the Feature}{83}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}2}{Conditionally Safe Features}}{85}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {2.1}C++11}{85}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\tt alignas}{86}{}%
\contentsline {subsection}{Description}{86}{}%
\contentsline {subsubsection}{Restricting the alignment of a particular object}{86}{}%
\contentsline {subsubsection}{Restricting the alignment of a user-defined type}{87}{}%
\contentsline {subsubsection}{Restricting the alignment of individual data members}{88}{}%
\contentsline {subsubsection}{Matching the alignment of another type}{89}{}%
\contentsline {subsection}{Use Cases}{89}{}%
\contentsline {subsubsection}{Creating a sufficiently aligned object buffer}{89}{}%
\contentsline {subsubsection}{Ensuring proper alignment for architecture-specific instructions}{90}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} among distinct objects in a multi-threaded program}{91}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} within a single thread-aware object}{92}{}%
\contentsline {subsection}{Potential Pitfalls}{93}{}%
\contentsline {subsubsection}{Underspecifying alignment is not universally reported}{93}{}%
\contentsline {subsubsection}{Incompatibly specifying alignment is \textbf {IFNDR}}{94}{}%
\contentsline {subsubsection}{Stricter alignment might reduce cache utilization}{94}{}%
\contentsline {subsection}{See Also}{95}{}%
\contentsline {subsection}{Further Reading}{95}{}%
\contentsline {subsection}{Appendix}{95}{}%
\contentsline {subsubsection}{Natural Alignment}{95}{}%
\contentsline {subsubsection}{Cache lines; L1, L2, and L3 cache; pages; and virtual memory}{97}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\TOCCode auto} Variables} Variables of Automatically Deduced Type}{100}{}%
\contentsline {section}{\makebox[12em][l]{\sf Braced Init} Brace-Initialization Syntax: {\tt \{\}}}{101}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\TOCCode constexpr} Functions} Compile-Time Evaluatable Functions}{102}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\TOCCode constexpr} Variables} Compile-Time Accessible Variables}{103}{}%
\contentsline {section}{\makebox[12em][l]{\sf Default Member Init} Default {\tt class}/{\tt union} Member Initializers}{104}{}%
\contentsline {section}{{\tt enum}\nobreakspace {}{\tt class}}{105}{}%
\contentsline {subsection}{Description}{105}{}%
\contentsline {subsubsection}{Drawbacks and workarounds relating to unscoped C++03 enumerations}{105}{}%
\contentsline {subsubsection}{Drawbacks relating to weakly typed, C++03 enumerators}{106}{}%
\contentsline {subsubsection}{Introducing the C++11 {\tt enum class}}{107}{}%
\contentsline {subsubsection}{{\tt enum} {\tt class} and underlying type}{109}{}%
\contentsline {subsection}{Use Cases}{110}{}%
\contentsline {subsubsection}{Avoiding unintended implicit conversions to arithmetic types}{110}{}%
\contentsline {subsubsection}{Avoiding namespace pollution}{111}{}%
\contentsline {subsubsection}{Improving overloading disambiguation}{112}{}%
\contentsline {subsubsection}{Encapsulating implementation details within the enumerators themselves}{115}{}%
\contentsline {subsection}{Potential Pitfalls}{116}{}%
\contentsline {subsubsection}{Strong typing of an {\tt enum} {\tt class} can be counterproductive}{116}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} for collections of named constants}{118}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} in association with bit flags}{119}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} in association with iteration}{120}{}%
\contentsline {subsubsection}{External use of opaque enumerators}{122}{}%
\contentsline {subsection}{Annoyances}{123}{}%
\contentsline {subsubsection}{Scoped enumerations do not necessarily add value}{123}{}%
\contentsline {subsection}{See Also}{123}{}%
\contentsline {subsection}{Further Reading}{123}{}%
\contentsline {section}{\makebox[12em][l]{\sf Opaque {\TOCCode enum}s} Opaque Enumeration Declarations}{124}{}%
\contentsline {section}{\makebox[12em][l]{\sf Underlying Type '11} Explicit Enumeration Underlying Type}{125}{}%
\contentsline {subsection}{Description}{125}{}%
\contentsline {subsubsection}{Specifying underlying type explicitly}{125}{}%
\contentsline {subsection}{Use Cases}{126}{}%
\contentsline {subsubsection}{Ensuring a compact representation where enumerator values are salient}{126}{}%
\contentsline {subsection}{Potential Pitfalls}{128}{}%
\contentsline {subsubsection}{External use of opaque enumerators}{128}{}%
\contentsline {subsubsection}{Subtleties of integral promotion}{128}{}%
\contentsline {subsection}{See Also}{129}{}%
\contentsline {subsection}{Further Reading}{130}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\TOCCode friend} '11} Extended {\tt friend} Declarations}{131}{}%
\contentsline {subsection}{Description}{131}{}%
\contentsline {subsection}{Use Cases}{133}{}%
\contentsline {subsubsection}{Safely declaring a previously declared type to be a friend}{133}{}%
\contentsline {subsubsection}{Befriending a type alias used as a customization point}{134}{}%
\contentsline {subsubsection}{Using the {\tt PassKey} idiom to enforce initialization}{136}{}%
\contentsline {subsubsection}{Granting a specific type access to a single {\tt private} function}{138}{}%
\contentsline {subsubsection}{Curiously recurring template pattern}{140}{}%
\contentsline {subsection}{Potential Pitfalls}{141}{}%
\contentsline {subsubsection}{Long-distance friendship}{141}{}%
\contentsline {subsection}{See Also}{141}{}%
\contentsline {subsection}{Further Reading}{141}{}%
\contentsline {subsection}{Appendix: Curiously Recurring Template Pattern Use Cases}{141}{}%
\contentsline {subsubsection}{Refactoring using the curiously recurring template pattern}{141}{}%
\contentsline {subsubsection}{Synthesizing equality using the curiously recurring template pattern}{144}{}%
\contentsline {subsubsection}{Compile-time polymorphism using the curiously recurring template pattern}{146}{}%
\contentsline {subsubsection}{Compile-time visitor using the curiously recurring template pattern}{149}{}%
\contentsline {section}{\makebox[12em][l]{\sf Forwarding References} Forwarding {\tt \&\&} References}{155}{}%
\contentsline {subsection}{Description}{155}{}%
\contentsline {subsubsection}{A brief review of function template argument deduction}{157}{}%
\contentsline {subsubsection}{Reference collapsing}{158}{}%
\contentsline {subsubsection}{Identifying forwarding references}{160}{}%
\contentsline {subsubsection}{{\tt auto\&\&} --- a forwarding reference in a non-parameter context}{160}{}%
\contentsline {subsubsection}{Forwarding references without forwarding}{162}{}%
\contentsline {subsubsection}{The {\tt std::forward} utility}{162}{}%
\contentsline {subsection}{Use Cases}{163}{}%
\contentsline {subsubsection}{Perfectly forwarding an expression to a downstream consumer}{163}{}%
\contentsline {subsubsection}{Handling multiple parameters concisely}{164}{}%
\contentsline {subsubsection}{Perfect forwarding for generic factory functions}{165}{}%
\contentsline {subsubsection}{Wrapping initialization in a generic factory function}{166}{}%
\contentsline {subsubsection}{Emplacement}{167}{}%
\contentsline {subsubsection}{Decomposing complex expressions}{168}{}%
\contentsline {subsection}{Potential Pitfalls}{170}{}%
\contentsline {subsubsection}{Surprising number of template instantiations with string literals}{170}{}%
\contentsline {subsubsection}{{\tt std::forward<T>} can enable move operations}{172}{}%
\contentsline {subsubsection}{A perfect-forwarding constructor can hijack the copy constructor}{172}{}%
\contentsline {subsection}{Annoyances}{174}{}%
\contentsline {subsubsection}{Forwarding references look just like rvalue references}{174}{}%
\contentsline {subsubsection}{Metafunctions are required in constraints}{175}{}%
\contentsline {subsection}{See Also}{176}{}%
\contentsline {subsection}{Further Reading}{177}{}%
\contentsline {section}{\makebox[12em][l]{\sf Generalized PODs} generalized Plain Old Data Types}{178}{}%
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode initializer\_list} List Initialization: {\tt std::initializer\_list<T>}}{179}{}%
\contentsline {section}{\makebox[12em][l]{\sf Lambdas} Unnamed Local Function Objects (Closures)}{180}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\TOCCode noexcept} Operator} The {\tt noexcept} Operator}{181}{}%
\contentsline {section}{\makebox[12em][l]{\sf Range {\TOCCode for}} Range-Based {\tt for} Loops}{182}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\itshape rvalue} References} Rvalue References: {\tt \&\&}}{183}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\TOCCode union} '11} Unions Having Non-Trivial Members}{184}{}%
\contentsline {subsection}{Description}{184}{}%
\contentsline {subsection}{Use Cases}{187}{}%
\contentsline {subsubsection}{Implementing a \textbf {sum type} as a discriminated (or tagged) {\tt union}}{187}{}%
\contentsline {subsection}{Potential Pitfalls}{190}{}%
\contentsline {subsubsection}{Inadvertent misuse can lead to latent \textbf {undefined behavior} at runtime}{190}{}%
\contentsline {subsection}{Annoyances}{190}{}%
\contentsline {subsection}{See Also}{190}{}%
\contentsline {subsection}{Further Reading}{190}{}%
\contentsline {section}{\makebox[12em][l]{\sf User-Defined Literals} User-Defined Literal Operators}{191}{}%
\contentsline {section}{\makebox[12em][l]{\sf Variadic Templates} Variable-Argument-Count Templates}{192}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {2.2}C++14}{192}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\makebox[12em][l]{\sf {\itshape Generic} Lambdas} Lambdas Having a Templated Call Operator}{193}{}%
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\makebox[12em][l]{\sf Short Title} Longer Wordier Title for Test}{194}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}3}{Unsafe Features}}{197}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {3.1}C++11}{197}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode carries\_dependency} The {\tt [[carries\_dependency]]} Attribute}{198}{}%
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode final} Preventing Overriding and Derivation}{200}{}%
\contentsline {section}{\makebox[12em][l]{\sf {\TOCCode noexcept} Specifier} The {\tt noexcept} Function Specification}{201}{}%
\contentsline {section}{\makebox[12em][l]{\sf Ref-Qualifiers} Reference Qualified Member Functions}{202}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {3.2}C++14}{202}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\makebox[12em][l]{\sf Deduced Return Type} Function ({\tt auto}) {\tt return}-Type Deduction}{203}{}%
\contentsline {section}{\makebox[12em][l]{\sf \TOCCode decltypeauto} Deducing Types Using {\tt decltype} Sematics}{204}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}4}{Parting Thoughts}}{205}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{Testing Section}{205}{}%
\contentsline {section}{Testing Another Section}{205}{}%
\contentsline {chapter}{{Bibliography}}{207}{}%
\contentsline {chapter}{{Glossary}}{213}{}%
\contentsline {chapter}{Index}{233}{}%
