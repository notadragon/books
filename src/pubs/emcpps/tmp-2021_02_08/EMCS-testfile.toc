\contentsline {chapter}{{Preface}}{xi}{}%
\contentsline {chapter}{{Acknowledgments}}{xv}{}%
\contentsline {chapter}{{About the Authors}}{xvii}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}0}{Introduction}}{1}{}%
\contentsline {section}{What Makes This Book Different}{1}{}%
\contentsline {section}{Scope for the First Edition}{2}{}%
\contentsline {section}{The {\itshape EMC++S} White Paper}{3}{}%
\contentsline {subsection}{Facts (Not Opinions)}{3}{}%
\contentsline {subsection}{Elucidation (Not Prescription)}{3}{}%
\contentsline {subsection}{Brevity (Not Verbosity)}{4}{}%
\contentsline {subsection}{Real-World (Not Contrived) Examples}{4}{}%
\contentsline {subsection}{At Scale (Not Overly Simplistic) Programs}{4}{}%
\contentsline {section}{What Do We Mean by {\sffamily \itshape Safely}?}{5}{}%
\contentsline {section}{A {\sffamily \itshape Safe} Feature}{5}{}%
\contentsline {section}{A {\sffamily \itshape Conditionally Safe} Feature}{6}{}%
\contentsline {section}{An {\sffamily \itshape Unsafe} Feature}{6}{}%
\contentsline {section}{Modern C++ Feature Catalog}{6}{}%
\contentsline {subsection}{Organization}{7}{}%
\contentsline {section}{How To Use This Book}{7}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}1}{Safe Features}}{9}{}%
\contentsline {section}{\numberline {1.1}C++11}{9}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\emcppsShowTitleAlt { toclong={Binary Literals: The \lstinline !0b! Prefix}, short={Binary Literals}, long={Binary Literals: The {\SecCode 0b} Prefix}, }}{10}{}%
\contentsline {subsection}{Description}{10}{}%
\contentsline {subsection}{Use Cases}{12}{}%
\contentsline {subsubsection}{Bit masking and bitwise operations}{12}{}%
\contentsline {subsubsection}{Replicating constant binary data}{13}{}%
\contentsline {subsection}{Potential Pitfalls}{14}{}%
\contentsline {subsection}{Annoyances}{14}{}%
\contentsline {subsection}{See Also}{14}{}%
\contentsline {subsection}{Further Reading}{14}{}%
\contentsline {section}{\emcppsShowTitleAlt { toclong={Consecutive Right-Angle Brackets}, tocshort={Consecutive {\TOCCode >}s}, short={Consecutive \lstinline !>!s}, long={Consecutive Right-Angle Brackets}, rhshort={Consecutive {\RHCode >}s}, }}{15}{}%
\contentsline {subsection}{Description}{15}{}%
\contentsline {subsubsection}{Using the greater-than or right-shift operators within template-argument expressions}{15}{}%
\contentsline {subsection}{Use Cases}{16}{}%
\contentsline {subsubsection}{Avoiding annoying whitespace when composing template types}{16}{}%
\contentsline {subsection}{Potential Pitfalls}{16}{}%
\contentsline {subsubsection}{Some C++03 programs may stop compiling in C++11}{16}{}%
\contentsline {subsubsection}{The meaning of a C++03 program can, in theory, silently change in C++11}{16}{}%
\contentsline {subsection}{Annoyances}{18}{}%
\contentsline {subsection}{See Also}{18}{}%
\contentsline {subsection}{Further Reading}{18}{}%
\contentsline {section}{\emcppsShowTitleAlt { toclong={Operator for Extracting Expression Types}, tocshort={\TOCCode decltype}, short={\lstinline !decltype!}, long={Operator for Extracting Expression Types}, rhshort={\RHCode decltype}, }}{19}{}%
\contentsline {subsection}{Description}{19}{}%
\contentsline {subsubsection}{Use with entities}{19}{}%
\contentsline {subsubsection}{Use with expressions}{19}{}%
\contentsline {subsection}{Use Cases}{20}{}%
\contentsline {subsubsection}{Avoiding unnecessary use of explicit typenames}{20}{}%
\contentsline {subsubsection}{Expressing type-consistency explicitly}{21}{}%
\contentsline {subsubsection}{Creating an auxiliary variable of generic type}{22}{}%
\contentsline {subsubsection}{Determining the validity of a generic expression}{22}{}%
\contentsline {subsection}{Potential Pitfalls}{24}{}%
\contentsline {subsection}{Annoyances}{25}{}%
\contentsline {subsubsection}{Mechanical repetition of expressions might be required}{25}{}%
\contentsline {subsection}{See Also}{25}{}%
\contentsline {subsection}{Further Reading}{25}{}%
\contentsline {section}{\emcppsShowTitleAlt { toclong={Using \lstinline !=!\,\lstinline !delete! for Arbitrary Functions}, short={Deleted Functions}, long={Using {\SecCode =}\,{\SecCode delete} for Arbitrary Functions}, }}{26}{}%
\contentsline {subsection}{Description}{26}{}%
\contentsline {subsection}{Use Cases}{26}{}%
\contentsline {subsubsection}{Suppressing special member function generation}{26}{}%
\contentsline {subsubsection}{Preventing a particular implicit conversion}{28}{}%
\contentsline {subsubsection}{Preventing all implicit conversions}{28}{}%
\contentsline {subsubsection}{Hiding a structural (nonpolymorphic) base class's member function}{29}{}%
\contentsline {subsection}{Potential Pitfalls}{30}{}%
\contentsline {subsection}{Annoyances}{30}{}%
\contentsline {subsubsection}{Deleting a function declares it}{30}{}%
\contentsline {subsection}{See Also}{32}{}%
\contentsline {subsection}{Further Reading}{32}{}%
\contentsline {section}{\emcppsShowTitleAlt { toclong={The \lstinline ![[noreturn]]! Attribute}, tocshort={\TOCCode noreturn}, short={\lstinline !noreturn!}, long={The {\SecCode [[noreturn]]} Attribute}, rhshort={\RHCode noreturn}, }}{33}{}%
\contentsline {subsection}{Description}{33}{}%
\contentsline {subsection}{Use Cases}{33}{}%
\contentsline {subsubsection}{Better compiler diagnostics}{33}{}%
\contentsline {subsubsection}{Improved runtime performance}{34}{}%
\contentsline {subsection}{Potential Pitfalls}{35}{}%
\contentsline {subsubsection}{\tt {[[noreturn]]} can inadvertently break an otherwise working program}{35}{}%
\contentsline {subsubsection}{Misuse of {\tt [[noreturn]]} on function pointers}{35}{}%
\contentsline {subsection}{Annoyances}{36}{}%
\contentsline {subsection}{See Also}{36}{}%
\contentsline {subsection}{Further Reading}{36}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={{\lstinline !nullptr!}}, tocshort={{\TOCCode nullptr}}, long={The Null-Pointer-Literal Keyword}, rhshort={\RHCode nullptr}, }}{37}{}%
\contentsline {subsection}{Description}{37}{}%
\contentsline {subsection}{Use Cases}{38}{}%
\contentsline {subsubsection}{Improvement of type safety}{38}{}%
\contentsline {subsubsection}{Disambiguation of \lstinline !(int)0! vs. \lstinline !(T*)0! during overload resolution}{39}{}%
\contentsline {subsubsection}{Overloading for a literal null pointer}{40}{}%
\contentsline {subsection}{Potential Pitfalls}{40}{}%
\contentsline {subsection}{Annoyances}{41}{}%
\contentsline {subsection}{See Also}{41}{}%
\contentsline {subsection}{Further Reading}{41}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !override!}, tocshort={\TOCCode override}, long={The {\tt override} Member-Function Specifier}, rhshort={\RHCode override}, }}{42}{}%
\contentsline {subsection}{Description}{42}{}%
\contentsline {subsection}{Use Cases}{43}{}%
\contentsline {subsubsection}{Ensuring that a member function of a base class is being overridden}{43}{}%
\contentsline {subsection}{Potential Pitfalls}{44}{}%
\contentsline {subsubsection}{Lack of consistency across a codebase}{44}{}%
\contentsline {subsection}{Annoyances}{44}{}%
\contentsline {subsection}{See Also}{44}{}%
\contentsline {subsection}{Further Reading}{44}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !static_assert!}, tocshort={\TOCCode static\_assert}, long={Compile-Time Assertions}, rhshort={\RHCode static\_assert}, }}{45}{}%
\contentsline {subsection}{Description}{45}{}%
\contentsline {subsubsection}{Syntax and semantics}{45}{}%
\contentsline {subsubsection}{Evaluation of static assertions in templates}{46}{}%
\contentsline {subsection}{Use Cases}{48}{}%
\contentsline {subsubsection}{Verifying assumptions about the target platform}{48}{}%
\contentsline {subsubsection}{Preventing misuse of class and function templates}{48}{}%
\contentsline {subsection}{Potential Pitfalls}{50}{}%
\contentsline {subsubsection}{Static assertions in templates can trigger unintended compilation failures}{50}{}%
\contentsline {subsubsection}{Misuse of static assertions to restrict overload sets}{51}{}%
\contentsline {subsection}{Annoyances}{53}{}%
\contentsline {subsubsection}{Mandatory string literal}{53}{}%
\contentsline {subsection}{See Also}{53}{}%
\contentsline {subsection}{Further Reading}{53}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Trailing Return}, long={Trailing Function Return Types}, }}{54}{}%
\contentsline {subsection}{Description}{54}{}%
\contentsline {subsection}{Use Cases}{56}{}%
\contentsline {subsubsection}{Function template whose return type depends on a parameter type}{56}{}%
\contentsline {subsubsection}{Avoiding having to qualify names redundantly in return types}{57}{}%
\contentsline {subsubsection}{Improving readability of declarations involving function pointers}{57}{}%
\contentsline {subsection}{Potential Pitfalls}{58}{}%
\contentsline {subsection}{Annoyances}{58}{}%
\contentsline {subsection}{See Also}{58}{}%
\contentsline {subsection}{Further Reading}{58}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !alignas!}, tocshort={\TOCCode alignas}, long={The {\SecCode alignas} Decorator}, toclong={The \lstinline !alignas! Decorator}, rhshort={\RHCode alignas}, }}{59}{}%
\contentsline {subsection}{Description}{59}{}%
\contentsline {subsubsection}{Restricting the alignment of a particular object}{59}{}%
\contentsline {subsubsection}{Restricting the alignment of a user-defined type}{60}{}%
\contentsline {subsubsection}{Restricting the alignment of individual data members}{61}{}%
\contentsline {subsubsection}{Matching the alignment of another type}{62}{}%
\contentsline {subsection}{Use Cases}{62}{}%
\contentsline {subsubsection}{Creating a sufficiently aligned object buffer}{62}{}%
\contentsline {subsubsection}{Ensuring proper alignment for architecture-specific instructions}{63}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} among distinct objects in a multi-threaded program}{64}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} within a single thread-aware object}{65}{}%
\contentsline {subsection}{Potential Pitfalls}{66}{}%
\contentsline {subsubsection}{Underspecifying alignment is not universally reported}{66}{}%
\contentsline {subsubsection}{Incompatibly specifying alignment is \textbf {IFNDR}}{67}{}%
\contentsline {subsubsection}{Stricter alignment might reduce cache utilization}{67}{}%
\contentsline {subsection}{See Also}{68}{}%
\contentsline {subsection}{Further Reading}{68}{}%
\contentsline {subsection}{Appendix}{68}{}%
\contentsline {subsubsection}{Natural Alignment}{68}{}%
\contentsline {subsubsection}{Cache lines; L1, L2, and L3 cache; pages; and virtual memory}{70}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !deprecated!}, tocshort={\TOCCode deprecated}, long={The {\SecCode [[deprecated]]} Attribute}, toclong={The \lstinline ![[deprecated]]! Attribute}, rhshort={\RHCode deprecated}, }}{73}{}%
\contentsline {subsection}{Description}{73}{}%
\contentsline {subsection}{Use Cases}{74}{}%
\contentsline {subsubsection}{Discouraging use of an obsolete or unsafe \textbf {entity}}{74}{}%
\contentsline {subsection}{Potential Pitfalls}{76}{}%
\contentsline {subsubsection}{Interaction with {\tt -Werror} (e.g., GCC, Clang) or {\tt /WX} (MSVC)}{76}{}%
\contentsline {subsection}{Annoyances}{76}{}%
\contentsline {subsection}{See Also}{76}{}%
\contentsline {subsection}{Further Reading}{76}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Raw String Literals}, long={Syntax for Unprocessed String Contents}, }}{77}{}%
\contentsline {subsection}{Description}{77}{}%
\contentsline {subsubsection}{Collisions}{78}{}%
\contentsline {subsection}{Use Cases}{80}{}%
\contentsline {subsubsection}{Embedding code in a C++ program}{80}{}%
\contentsline {subsection}{Potential Pitfalls}{81}{}%
\contentsline {subsubsection}{Unexpected indentation}{81}{}%
\contentsline {subsubsection}{Encoding of new lines and whitespace}{82}{}%
\contentsline {subsection}{Annoyances}{83}{}%
\contentsline {subsection}{See Also}{83}{}%
\contentsline {subsection}{Further Reading}{83}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !using! Aliases}, tocshort={{\TOCCode using} Aliases}, long={Type/Template Aliases (Extended {\SecCode typedef})}, toclong={Type/Template Aliases (Extended \lstinline !typedef!)}, rhshort={{\RHCode using} Aliases}, }}{84}{}%
\contentsline {subsection}{Description}{84}{}%
\contentsline {subsection}{Use Cases}{85}{}%
\contentsline {subsubsection}{Simplifying convoluted \lstinline !typedef! declarations}{85}{}%
\contentsline {subsubsection}{Binding arguments to template parameters}{86}{}%
\contentsline {subsubsection}{Providing a shorthand notation for type traits}{87}{}%
\contentsline {subsection}{Potential Pitfalls}{88}{}%
\contentsline {subsection}{Annoyances}{88}{}%
\contentsline {subsection}{See Also}{88}{}%
\contentsline {subsection}{Further Reading}{88}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Defaulted Functions}, long={Using {\SecCode =default} for Special Member Functions}, toclong={Using \lstinline !=default! for Special Member Functions}, }}{89}{}%
\contentsline {subsection}{Description}{89}{}%
\contentsline {subsubsection}{Declaring a special member function explicitly}{89}{}%
\contentsline {paragraph}{Example 1: Providing just the default constructor}{89}{}%
\contentsline {paragraph}{Example 2: Providing just a copy constructor}{90}{}%
\contentsline {paragraph}{Example 3: Providing just the destructor}{90}{}%
\contentsline {paragraph}{Example 4: Providing more than one special member function}{90}{}%
\contentsline {subsubsection}{Defaulting the first declaration of a special member function explicitly}{90}{}%
\contentsline {subsubsection}{Defaulting the implementation of a user-provided special member function}{91}{}%
\contentsline {subsection}{Use Cases}{92}{}%
\contentsline {subsubsection}{Restoring the generation of a special member function suppressed by another}{92}{}%
\contentsline {subsubsection}{Making class APIs explicit at no runtime cost}{94}{}%
\contentsline {subsubsection}{Preserving type triviality}{95}{}%
\contentsline {subsubsection}{Physically decoupling the interface from the implementation}{96}{}%
\contentsline {subsection}{Potential Pitfalls}{97}{}%
\contentsline {subsubsection}{Defaulted special member functions cannot restore trivial copyability}{97}{}%
\contentsline {subsection}{Annoyances}{98}{}%
\contentsline {subsubsection}{Generation of defaulted functions is not guaranteed}{98}{}%
\contentsline {subsection}{See Also}{99}{}%
\contentsline {subsection}{Further Reading}{99}{}%
\contentsline {subsection}{Appendix: Implicit Generation of Special Member Functions}{100}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Attribute Syntax}, long={Generalized Attribute Support}, }}{101}{}%
\contentsline {subsection}{Description}{101}{}%
\contentsline {subsubsection}{C++ attribute syntax}{101}{}%
\contentsline {subsubsection}{C++ attribute placement}{102}{}%
\contentsline {subsubsection}{Common compiler-dependent attributes}{102}{}%
\contentsline {subsection}{Use Cases}{104}{}%
\contentsline {subsubsection}{Prompting useful compiler diagnostics}{104}{}%
\contentsline {subsubsection}{Hinting at additional optimization opportunities}{105}{}%
\contentsline {subsubsection}{Stating explicit assumptions in code to achieve better optimizations}{105}{}%
\contentsline {subsubsection}{Using attributes to control external static analysis}{107}{}%
\contentsline {subsubsection}{Creating new attributes to express semantic properties}{107}{}%
\contentsline {subsection}{Potential Pitfalls}{108}{}%
\contentsline {subsubsection}{Unrecognized attributes have implementation-defined behavior}{108}{}%
\contentsline {subsubsection}{Some attributes, if misused, can affect program correctness}{108}{}%
\contentsline {subsection}{Annoyances}{109}{}%
\contentsline {subsection}{See Also}{109}{}%
\contentsline {subsection}{Further Reading}{109}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {1.2}C++14}{109}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\emcppsShowTitleAlt { toclong={The Digit Separator: \lstinline !'!}, tocshort={Digit Separators}, short={Digit Separators}, long={The Digit Separator: {\SecCode '}}, }}{110}{}%
\contentsline {subsection}{Description}{110}{}%
\contentsline {subsection}{Use Cases}{111}{}%
\contentsline {subsubsection}{Grouping digits together in large constants}{111}{}%
\contentsline {subsection}{Potential Pitfalls}{112}{}%
\contentsline {subsection}{See Also}{112}{}%
\contentsline {subsection}{Further Reading}{112}{}%
\contentsline {subsection}{Appendix: Silent Loss of Precision in Floating-Point Literals}{112}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !constexpr! Functions '14}, tocshort={{\TOCCode constexpr} Functions '14}, long={Relaxed Restrictions on {\SecCode constexpr} Functions}, toclong={Relaxed Restrictions on \lstinline !constexpr! Functions}, rhshort={{\RHCode constexpr} Functions '14}, }}{115}{}%
\contentsline {subsection}{Description}{115}{}%
\contentsline {subsection}{Use Cases}{117}{}%
\contentsline {subsubsection}{Nonrecursive {\tt constexpr} algorithms}{117}{}%
\contentsline {subsubsection}{Optimized metaprogramming algorithms}{118}{}%
\contentsline {subsection}{Potential Pitfalls}{122}{}%
\contentsline {subsection}{Annoyances}{122}{}%
\contentsline {subsection}{See Also}{122}{}%
\contentsline {subsection}{Further Reading}{122}{}%
\contentsline {subsection}{Appendix: Optimized C++11 Example Algorithms}{122}{}%
\contentsline {subsubsection}{Recursive Fibonacci}{122}{}%
\contentsline {subsubsection}{{\ttfamily constexpr} type list {\ttfamily Count} algorithm}{123}{}%
\contentsline {subsection}{Appendix to the Feature}{126}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}2}{Conditionally Safe Features}}{129}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {2.1}C++11}{129}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !alignas!}, tocshort={\TOCCode alignas}, long={The {\SecCode alignas} Decorator}, toclong={The \lstinline !alignas! Decorator}, rhshort={\RHCode alignas}, }}{130}{}%
\contentsline {subsection}{Description}{130}{}%
\contentsline {subsubsection}{Restricting the alignment of a particular object}{130}{}%
\contentsline {subsubsection}{Restricting the alignment of a user-defined type}{131}{}%
\contentsline {subsubsection}{Restricting the alignment of individual data members}{132}{}%
\contentsline {subsubsection}{Matching the alignment of another type}{133}{}%
\contentsline {subsection}{Use Cases}{133}{}%
\contentsline {subsubsection}{Creating a sufficiently aligned object buffer}{133}{}%
\contentsline {subsubsection}{Ensuring proper alignment for architecture-specific instructions}{134}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} among distinct objects in a multi-threaded program}{135}{}%
\contentsline {subsubsection}{Avoiding \textbf {false sharing} within a single thread-aware object}{136}{}%
\contentsline {subsection}{Potential Pitfalls}{137}{}%
\contentsline {subsubsection}{Underspecifying alignment is not universally reported}{137}{}%
\contentsline {subsubsection}{Incompatibly specifying alignment is \textbf {IFNDR}}{138}{}%
\contentsline {subsubsection}{Stricter alignment might reduce cache utilization}{138}{}%
\contentsline {subsection}{See Also}{139}{}%
\contentsline {subsection}{Further Reading}{139}{}%
\contentsline {subsection}{Appendix}{139}{}%
\contentsline {subsubsection}{Natural Alignment}{139}{}%
\contentsline {subsubsection}{Cache lines; L1, L2, and L3 cache; pages; and virtual memory}{141}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !alignof!}, tocshort={\TOCCode alignof}, long={The (Compile-Time) {\SecCode alignof} Operator}, toclong={The (Compile-Time) \lstinline !alignof! Operator}, rhshort={\RHCode alignof}, }}{144}{}%
\contentsline {subsection}{Description}{144}{}%
\contentsline {subsubsection}{\tt {alignof} Fundamental Types}{144}{}%
\contentsline {subsubsection}{\tt {alignof} User-Defined Types}{145}{}%
\contentsline {subsection}{Use Cases}{146}{}%
\contentsline {subsubsection}{Probing the alignment of a type during development}{146}{}%
\contentsline {subsubsection}{Determining if a given buffer is sufficiently aligned}{147}{}%
\contentsline {subsubsection}{Monotonic memory allocation}{149}{}%
\contentsline {subsection}{Annoyances}{152}{}%
\contentsline {subsubsection}{\tt {alignof} (unlike \tt {sizeof}) is defined only on types}{152}{}%
\contentsline {subsection}{See Also}{153}{}%
\contentsline {subsection}{Further Reading}{153}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !auto! Variables}, tocshort={{\TOCCode auto} Variables}, long={Variables of Automatically Deduced Type}, rhshort={{\RHCode auto} Variables}, }}{154}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Braced Init}, long={Brace-Initialization Syntax: {\SecCode \{\}}}, toclong={Brace-Initialization Syntax: \lstinline !\{\}!}, }}{155}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !constexpr! Functions}, tocshort={{\TOCCode constexpr} Functions}, long={Compile-Time Evaluatable Functions}, rhshort={{\RHCode constexpr} Functions}, }}{156}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !constexpr! Variables}, tocshort={{\TOCCode constexpr} Variables}, long={Compile-Time Accessible Variables}, rhshort={{\RHCode constexpr} Variables}, }}{157}{}%
\contentsline {subsection}{Description}{158}{}%
\contentsline {subsection}{Use Cases}{162}{}%
\contentsline {subsubsection}{Abstract use case}{162}{}%
\contentsline {subsubsection}{Avoiding boilerplate code when employing structural inheritance}{162}{}%
\contentsline {subsubsection}{Avoiding boilerplate code when employing implementation inheritance}{163}{}%
\contentsline {subsubsection}{Implementing a strong {\tt typedef}}{164}{}%
\contentsline {subsubsection}{Incorporating reusable functionality via a mix-in}{167}{}%
\contentsline {subsection}{Potential Pitfalls}{168}{}%
\contentsline {subsubsection}{Newly introduced constructors in the base class can silently alter program behavior}{168}{}%
\contentsline {subsubsection}{Beware of inheriting implicit constructors}{169}{}%
\contentsline {subsection}{Annoyances}{171}{}%
\contentsline {subsubsection}{Inherited constructors cannot be selected individually}{171}{}%
\contentsline {subsubsection}{Access levels of inherited constructors are the same as in base class}{172}{}%
\contentsline {subsection}{See Also}{173}{}%
\contentsline {subsection}{Further Reading}{174}{}%
\contentsline {subsection}{Appendix: C++17 Improvements Made Retroactive to C++11/14}{174}{}%
\contentsline {subsubsection}{Inheriting constructors declared with a C-style ellipsis}{174}{}%
\contentsline {subsubsection}{Inheriting constructors that rely on friendship to declare function parameters}{175}{}%
\contentsline {subsubsection}{Inheriting constructor templates would be ill formed for a local class}{176}{}%
\contentsline {subsubsection}{SFINAE evaluation context with default function arguments}{176}{}%
\contentsline {subsubsection}{Suppression of constructors in the presence of default arguments}{177}{}%
\contentsline {subsubsection}{Suprising behavior with unary constructor templates}{178}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Default Member Init}, long={Default {\SecCode class}/{\SecCode union} Member Initializers}, toclong={Default \lstinline !class!/\lstinline !union! Member Initializers}, }}{179}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !enum!\nobreakspace {}\lstinline !class!}, tocshort={{\TOCCode enum}\nobreakspace {}{\TOCCode class}}, long={Strongly Typed Scoped Enumerations}, rhshort={{\RHCode enum}\nobreakspace {}{\RHCode class}}, }}{180}{}%
\contentsline {subsection}{Description}{180}{}%
\contentsline {subsubsection}{Drawbacks and workarounds relating to unscoped C++03 enumerations}{180}{}%
\contentsline {subsubsection}{Drawbacks relating to weakly typed, C++03 enumerators}{181}{}%
\contentsline {subsubsection}{Introducing the C++11 {\tt enum class}}{182}{}%
\contentsline {subsubsection}{{\tt enum} {\tt class} and underlying type}{184}{}%
\contentsline {subsection}{Use Cases}{185}{}%
\contentsline {subsubsection}{Avoiding unintended implicit conversions to arithmetic types}{185}{}%
\contentsline {subsubsection}{Avoiding namespace pollution}{186}{}%
\contentsline {subsubsection}{Improving overloading disambiguation}{188}{}%
\contentsline {subsubsection}{Encapsulating implementation details within the enumerators themselves}{191}{}%
\contentsline {subsection}{Potential Pitfalls}{192}{}%
\contentsline {subsubsection}{Strong typing of an {\tt enum} {\tt class} can be counterproductive}{192}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} for collections of named constants}{193}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} in association with bit flags}{195}{}%
\contentsline {subsubsection}{Misuse of {\tt enum} {\tt class} in association with iteration}{196}{}%
\contentsline {subsubsection}{External use of opaque enumerators}{198}{}%
\contentsline {subsection}{Annoyances}{198}{}%
\contentsline {subsubsection}{Scoped enumerations do not necessarily add value}{198}{}%
\contentsline {subsection}{See Also}{199}{}%
\contentsline {subsection}{Further Reading}{199}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Opaque \lstinline !enum!s}, tocshort={Opaque {\TOCCode enum}s}, long={Opaque Enumeration Declarations}, rhshort={Opaque {\RHCode enum}s}, }}{200}{}%
\contentsline {subsection}{Description}{200}{}%
\contentsline {subsection}{Use Cases}{202}{}%
\contentsline {subsubsection}{Using opaque enumerations within a header file}{202}{}%
\contentsline {subsubsection}{Cookie: Insulating all external clients from the enumerator list}{204}{}%
\contentsline {subsubsection}{Dual-Access: Insulating some external clients from the enumerator list}{211}{}%
\contentsline {subsection}{Potential Pitfalls}{214}{}%
\contentsline {subsubsection}{Redeclaring an externally defined enumeration locally}{214}{}%
\contentsline {subsubsection}{Inciting local enumeration declarations: an attractive nuisance}{216}{}%
\contentsline {subsection}{Annoyances}{216}{}%
\contentsline {subsubsection}{Opaque enumerations are not completely type safe}{216}{}%
\contentsline {subsection}{See Also}{217}{}%
\contentsline {subsection}{Further Reading}{217}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Underlying Type '11}, long={Explicit Enumeration Underlying Type}, }}{218}{}%
\contentsline {subsection}{Description}{218}{}%
\contentsline {subsubsection}{Specifying underlying type explicitly}{219}{}%
\contentsline {subsection}{Use Cases}{219}{}%
\contentsline {subsubsection}{Ensuring a compact representation where enumerator values are salient}{219}{}%
\contentsline {subsection}{Potential Pitfalls}{221}{}%
\contentsline {subsubsection}{External use of opaque enumerators}{221}{}%
\contentsline {subsubsection}{Subtleties of integral promotion}{221}{}%
\contentsline {subsection}{See Also}{223}{}%
\contentsline {subsection}{Further Reading}{223}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !friend! '11}, tocshort={{\TOCCode friend} '11}, long={Extended {\SecCode friend} Declarations}, toclong={Extended \lstinline !friend! Declarations}, rhshort={{\RHCode friend} '11}, }}{224}{}%
\contentsline {subsection}{Description}{224}{}%
\contentsline {subsection}{Use Cases}{226}{}%
\contentsline {subsubsection}{Safely declaring a previously declared type to be a friend}{226}{}%
\contentsline {subsubsection}{Befriending a type alias used as a customization point}{227}{}%
\contentsline {subsubsection}{Using the {\tt PassKey} idiom to enforce initialization}{229}{}%
\contentsline {subsubsection}{Granting a specific type access to a single {\tt private} function}{231}{}%
\contentsline {subsubsection}{Curiously recurring template pattern}{233}{}%
\contentsline {subsection}{Potential Pitfalls}{234}{}%
\contentsline {subsubsection}{Long-distance friendship}{234}{}%
\contentsline {subsection}{See Also}{234}{}%
\contentsline {subsection}{Further Reading}{234}{}%
\contentsline {subsection}{Appendix: Curiously Recurring Template Pattern Use Cases}{234}{}%
\contentsline {subsubsection}{Refactoring using the curiously recurring template pattern}{234}{}%
\contentsline {subsubsection}{Synthesizing equality using the curiously recurring template pattern}{237}{}%
\contentsline {subsubsection}{Compile-time polymorphism using the curiously recurring template pattern}{239}{}%
\contentsline {subsubsection}{Compile-time visitor using the curiously recurring template pattern}{242}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !extern!\nobreakspace {}\lstinline !template!}, tocshort={{\TOCCode extern}\nobreakspace {}{\TOCCode template}}, long={Explicit Instantiation Declarations}, rhshort={{\RHCode extern}\nobreakspace {}{\RHCode template}}, }}{248}{}%
\contentsline {subsection}{Description}{248}{}%
\contentsline {subsubsection}{Explicit-instantiation definition}{248}{}%
\contentsline {subsubsection}{Explicit-instantiation declaration}{249}{}%
\contentsline {subsubsection}{A more complete illustrative example}{250}{}%
\contentsline {subsubsection}{The effect on various \lstinline !.o! files}{254}{}%
\contentsline {subsection}{Use Cases}{260}{}%
\contentsline {subsubsection}{Reducing template code bloat in object files}{260}{}%
\contentsline {subsubsection}{Insulating template definitions from clients}{264}{}%
\contentsline {subsection}{Potential Pitfalls}{265}{}%
\contentsline {subsubsection}{Corresponding explicit-instantiation declarations and definitions}{265}{}%
\contentsline {subsubsection}{Accidentally making matters worse}{267}{}%
\contentsline {subsection}{Annoyances}{268}{}%
\contentsline {subsubsection}{No good place to put definitions for unrelated classes}{268}{}%
\contentsline {subsubsection}{All members of an explicitly defined template class must be valid}{269}{}%
\contentsline {subsection}{See Also}{270}{}%
\contentsline {subsection}{Further Reading}{270}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Forwarding References}, long={Forwarding {\SecCode \&\&} References}, toclong={Forwarding \lstinline !\&\&! References}, }}{271}{}%
\contentsline {subsection}{Description}{271}{}%
\contentsline {subsubsection}{A brief review of function template argument deduction}{273}{}%
\contentsline {subsubsection}{Reference collapsing}{274}{}%
\contentsline {subsubsection}{Identifying forwarding references}{276}{}%
\contentsline {subsubsection}{{\tt auto\&\&} --- a forwarding reference in a non-parameter context}{276}{}%
\contentsline {subsubsection}{Forwarding references without forwarding}{278}{}%
\contentsline {subsubsection}{The {\tt std::forward} utility}{278}{}%
\contentsline {subsection}{Use Cases}{279}{}%
\contentsline {subsubsection}{Perfectly forwarding an expression to a downstream consumer}{279}{}%
\contentsline {subsubsection}{Handling multiple parameters concisely}{280}{}%
\contentsline {subsubsection}{Perfect forwarding for generic factory functions}{281}{}%
\contentsline {subsubsection}{Wrapping initialization in a generic factory function}{282}{}%
\contentsline {subsubsection}{Emplacement}{283}{}%
\contentsline {subsubsection}{Decomposing complex expressions}{285}{}%
\contentsline {subsection}{Potential Pitfalls}{287}{}%
\contentsline {subsubsection}{Surprising number of template instantiations with string literals}{287}{}%
\contentsline {subsubsection}{{\tt std::forward<T>} can enable move operations}{288}{}%
\contentsline {subsubsection}{A perfect-forwarding constructor can hijack the copy constructor}{288}{}%
\contentsline {subsection}{Annoyances}{290}{}%
\contentsline {subsubsection}{Forwarding references look just like rvalue references}{290}{}%
\contentsline {subsubsection}{Metafunctions are required in constraints}{291}{}%
\contentsline {subsection}{See Also}{293}{}%
\contentsline {subsection}{Further Reading}{293}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Generalized PODs}, long={Generalized Plain Old Data Types}, }}{294}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Generalized PODs}, long={Generalized Plain Old Data Types}, }}{295}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Lambdas}, long={Unnamed Local Function Objects (Closures)}, }}{296}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !noexcept! Operator}, tocshort={{\TOCCode noexcept} Operator}, long={The {\SecCode noexcept} Operator}, toclong={The \lstinline !noexcept! Operator}, rhshort={{\RHCode noexcept} Operator}, }}{297}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Range \lstinline !for!}, tocshort={Range {\TOCCode Range for}}, long={Range-Based {\SecCode for} Loops}, toclong={Range-Based \lstinline !for! Loops}, rhshort={Range {\RHCode for}}, }}{298}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={{\itshape rvalue} References}, long={Rvalue References: {\SecCode \&\&}}, toclong={Rvalue References: \lstinline !\&\&!}, }}{299}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !union!\nobreakspace {}'11}, tocshort={{\TOCCode union}\nobreakspace {}'11}, rhshort={{\RHCode union}\nobreakspace {}'11}, long={Unions Having Non-Trivial Members}, }}{300}{}%
\contentsline {subsection}{Description}{300}{}%
\contentsline {subsection}{Use Cases}{303}{}%
\contentsline {subsubsection}{Implementing a {\romeoglossnonfirst \textbf {sum type}} as a discriminated {\tt union}}{303}{}%
\contentsline {subsection}{Potential Pitfalls}{306}{}%
\contentsline {subsubsection}{Inadvertent misuse can lead to latent {\romeoglossnonfirst \textbf {undefined behavior}} at runtime}{306}{}%
\contentsline {subsection}{Annoyances}{306}{}%
\contentsline {subsection}{See Also}{306}{}%
\contentsline {subsection}{Further Reading}{306}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={User-Defined Literals}, long={User-Defined Literal Operators}, }}{307}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Variadic Templates}, long={Variable-Argument-Count Templates}, }}{308}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {2.2}C++14}{308}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\emcppsShowTitleAlt { short={{\itshape Generic} Lambdas}, long={Lambdas Having a Templated Call Operator}, }}{309}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !constexpr! Functions '14}, tocshort={{\TOCCode constexpr} Functions '14}, long={Relaxed Restrictions on {\SecCode constexpr} Functions}, toclong={Relaxed Restrictions on \lstinline !constexpr! Functions}, rhshort={{\RHCode constexpr} Functions '14}, }}{310}{}%
\contentsline {subsection}{Description}{310}{}%
\contentsline {subsection}{Use Cases}{312}{}%
\contentsline {subsubsection}{Nonrecursive {\tt constexpr} algorithms}{312}{}%
\contentsline {subsubsection}{Optimized metaprogramming algorithms}{313}{}%
\contentsline {subsection}{Potential Pitfalls}{317}{}%
\contentsline {subsection}{Annoyances}{317}{}%
\contentsline {subsection}{See Also}{317}{}%
\contentsline {subsection}{Further Reading}{317}{}%
\contentsline {subsection}{Appendix: Optimized C++11 Example Algorithms}{317}{}%
\contentsline {subsubsection}{Recursive Fibonacci}{317}{}%
\contentsline {subsubsection}{{\ttfamily constexpr} type list {\ttfamily Count} algorithm}{318}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Lambda Captures}, long={Lambda-Capture Expressions}, }}{320}{}%
\contentsline {subsection}{Description}{320}{}%
\contentsline {subsection}{Use Cases}{322}{}%
\contentsline {subsubsection}{Moving (as opposed to copying) objects into a closure}{322}{}%
\contentsline {subsubsection}{Providing mutable state for a closure}{323}{}%
\contentsline {subsubsection}{Capturing a modifiable copy of an existing {\ttfamily const} variable}{323}{}%
\contentsline {subsection}{Potential Pitfalls}{325}{}%
\contentsline {subsubsection}{Forwarding an existing variable into a closure always results in an object (never a reference)}{325}{}%
\contentsline {subsection}{Annoyances}{326}{}%
\contentsline {subsubsection}{There’s no easy way to synthesize a {\ttfamily const} data member}{326}{}%
\contentsline {subsubsection}{{\ttfamily std::function} supports only copyable callable objects}{327}{}%
\contentsline {subsection}{See Also}{327}{}%
\contentsline {subsection}{Further Reading}{328}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}3}{Unsafe Features}}{329}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {3.1}C++11}{329}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !carries_dependency!}, tocshort={\TOCCode carries\_dependency}, long={The {\SecCode [[carries\_dependency]]} Attribute}, toclong={The \lstinline ![[carries\_dependency]]! Attribute}, rhshort={\RHCode carries\_dependency}, }}{330}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !final!}, tocshort={\TOCCode final}, long={Preventing Overriding and Derivation}, rhshort={\RHCode final}, }}{331}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !inline!\nobreakspace {}\lstinline !namespace!}, tocshort={{\TOCCode inline}\nobreakspace {}{\TOCCode namespace}}, long={Transparently Nested Namespaces}, rhshort={{\RHCode inline}\nobreakspace {}{\RHCode namespace}}, }}{332}{}%
\contentsline {subsection}{Description}{332}{}%
\contentsline {subsubsection}{Loss of access to duplicate names in enclosing namespace}{333}{}%
\contentsline {subsubsection}{Argument-dependent–lookup interoperability across {\tt inline} {\tt namespace} boundaries}{335}{}%
\contentsline {subsubsection}{The ability to specialize templates declared in a nested {\tt inline} namespace}{336}{}%
\contentsline {subsubsection}{Reopening namespaces can reopen nested {\tt inline} ones}{338}{}%
\contentsline {subsection}{Use Cases}{339}{}%
\contentsline {subsubsection}{Facilitating API migration}{339}{}%
\contentsline {subsubsection}{Link-safe ABI versioning}{344}{}%
\contentsline {subsubsection}{Build modes and ABI link safety}{348}{}%
\contentsline {subsubsection}{Enabling selective {\tt using} directives for short-named entities}{351}{}%
\contentsline {subsection}{Potential Pitfalls}{353}{}%
\contentsline {subsubsection}{{\tt inline}-namespace-based versioning doesn’t scale}{353}{}%
\contentsline {subsubsection}{Specializing templates in {\tt std} can be problematic}{354}{}%
\contentsline {subsubsection}{Inconsistent use of {\tt inline} keyword is \textbf {ill formed, no diagnostic required}}{356}{}%
\contentsline {subsection}{Annoyances}{356}{}%
\contentsline {subsubsection}{Inability to redeclare across namespaces impedes code factoring}{356}{}%
\contentsline {subsubsection}{Only one namespace can contain any given {\tt inline} namespace}{359}{}%
\contentsline {subsection}{See Also}{359}{}%
\contentsline {subsection}{Further Reading}{360}{}%
\contentsline {subsection}{Appendix: Case study of using {\tt inline} namespaces for versioning}{360}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !noexcept! Specifier}, tocshort={{\TOCCode noexcept} Specifier}, long={The {\SecCode noexcept} Function Specification}, toclong={The \lstinline !noexcept! Function Specification}, rhshort={{\RHCode noexcept} Specifier}, }}{362}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={Ref-Qualifiers}, long={Reference Qualified Member Functions}, }}{363}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{\numberline {3.2}C++14}{363}
\renewcommand *\cftsecindent {4.5em}
\contentsline {section}{\emcppsShowTitleAlt { short={Deduced Return Type}, long={Function ({\SecCode auto}) {\SecCode return}-Type Deduction}, toclong={Function (\lstinline !auto!) \lstinline !return!-Type Deduction}, }}{364}{}%
\contentsline {section}{\emcppsShowTitleAlt { short={\lstinline !decltypeauto!}, tocshort={\TOCCode decltypeauto}, long={Deducing Types Using {\SecCode decltype} Semantics}, toclong={Deducing Types Using \lstinline !decltype! Semantics}, rhshort={\RHCode decltypeauto}, }}{365}{}%
\contentsline {chapter}{\numberline {Chapter\nobreakspace {}4}{Parting Thoughts}}{367}{}%
\renewcommand *\cftsecindent {1.25em}
\contentsline {section}{Testing Section}{367}{}%
\contentsline {section}{Testing Another Section}{367}{}%
\contentsline {chapter}{{Bibliography}}{369}{}%
\contentsline {chapter}{{Glossary}}{375}{}%
\contentsline {chapter}{Index}{399}{}%
